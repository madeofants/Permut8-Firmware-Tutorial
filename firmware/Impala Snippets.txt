// impala does not support file inclusion or linking of separate compilation units. Therefore we have this snippets
// file with useful utility functions that you can simply copy & paste. (Another solution for sharing common code is
// otherwise to concat different .gazl files.)

/* ------ Standard Tables ------ */

// These are the exact "exponential" tables used by various built-in operators in Permut8 version 1.

readonly array EIGHT_BIT_EXP_TABLE[256] = {
	0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x84, 0x88, 0x8c, 0x90, 0x94, 0x98, 0x9c, 0xa0, 0xa4, 0xa8, 0xac, 0xb0, 0xb4, 0xb8, 0xbc, 
	0xc0, 0xc4, 0xc8, 0xcc, 0xd0, 0xd4, 0xd8, 0xdc, 0xe0, 0xe4, 0xe8, 0xec, 0xf0, 0xf4, 0xf8, 0xfc, 
	0x100, 0x110, 0x120, 0x130, 0x140, 0x150, 0x160, 0x170, 0x180, 0x190, 0x1a0, 0x1b0, 0x1c0, 0x1d0, 0x1e0, 0x1f0, 
	0x200, 0x220, 0x240, 0x260, 0x280, 0x2a0, 0x2c0, 0x2e0, 0x300, 0x320, 0x340, 0x360, 0x380, 0x3a0, 0x3c0, 0x3e0, 
	0x400, 0x440, 0x480, 0x4c0, 0x500, 0x540, 0x580, 0x5c0, 0x600, 0x640, 0x680, 0x6c0, 0x700, 0x740, 0x780, 0x7c0, 
	0x800, 0x880, 0x900, 0x980, 0xa00, 0xa80, 0xb00, 0xb80, 0xc00, 0xc80, 0xd00, 0xd80, 0xe00, 0xe80, 0xf00, 0xf80, 
	0x1000, 0x1100, 0x1200, 0x1300, 0x1400, 0x1500, 0x1600, 0x1700, 0x1800, 0x1900, 0x1a00, 0x1b00, 0x1c00, 0x1d00, 0x1e00, 0x1f00, 
	0x2000, 0x2200, 0x2400, 0x2600, 0x2800, 0x2a00, 0x2c00, 0x2e00, 0x3000, 0x3200, 0x3400, 0x3600, 0x3800, 0x3a00, 0x3c00, 0x3e00, 
	0x4000, 0x4400, 0x4800, 0x4c00, 0x5000, 0x5400, 0x5800, 0x5c00, 0x6000, 0x6400, 0x6800, 0x6c00, 0x7000, 0x7400, 0x7800, 0x7c00, 
	0x8000, 0x8800, 0x9000, 0x9800, 0xa000, 0xa800, 0xb000, 0xb800, 0xc000, 0xc800, 0xd000, 0xd800, 0xe000, 0xe800, 0xf000, 0xffff 
}

readonly array SEVEN_BIT_EXP_TABLE[128] = {
	0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
	0x40, 0x44, 0x48, 0x4c, 0x50, 0x54, 0x58, 0x5c, 0x60, 0x64, 0x68, 0x6c, 0x70, 0x74, 0x78, 0x7c,
	0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0, 0x100, 0x120, 0x140, 0x160, 0x180, 0x1a0, 0x1c0, 0x1e0,
	0x200, 0x240, 0x280, 0x2c0, 0x300, 0x340, 0x380, 0x3c0, 0x400, 0x480, 0x500, 0x580, 0x600, 0x680, 0x700, 0x780,
	0x800, 0x900, 0xa00, 0xb00, 0xc00, 0xd00, 0xe00, 0xf00, 0x1000, 0x1200, 0x1400, 0x1600, 0x1800, 0x1a00, 0x1c00, 0x1e00,
	0x2000, 0x2400, 0x2800, 0x2c00, 0x3000, 0x3400, 0x3800, 0x3c00, 0x4000, 0x4800, 0x5000, 0x5800, 0x6000, 0x6800, 0x7000, 0x8000
}

/* ------ Strings and tracing ------ */

const float EPSILON_FLOAT = 1.0e-45
const float SMALL_FLOAT = 1.0e-5
const float LARGE_FLOAT = 1.0e+10
const float HUGE_FLOAT = 1.0e+38

function strlen(pointer s)
returns int l
locals	pointer a
{
	a = s;
	while ((int)*a != 0) a = a + 1;
	l = a - s;
}

function strcpy(pointer d, pointer s)
returns pointer r
locals	pointer a, pointer b
{
	r = a = d;
	b = s;
	while ((*a = (int)*b) != 0) {
		a = a + 1;
		b = b + 1;
	}
}

function strcat(pointer d, pointer s)
returns pointer r
locals	pointer a, pointer b
{
	r = a = d;
	while ((int)*a != 0) a = a + 1;
	b = s;
	while ((*a = (int)*b) != 0) {
		a = a + 1;
		b = b + 1;
	}
}

function strcmp(pointer s0, pointer s1)
returns int d
locals pointer a, pointer b, int c
{
	a = s0;
	b = s1;
	while ((d = (c = (int) *a) - (int) *b) == 0 && c != 0) {
		a = a + 1;
		b = b + 1;
	}
}

function strncmp(pointer s0, pointer s1, int n)
returns	int d
locals	pointer a
		, pointer b
		, int i
		, int c
{
	d = 0;
	if (n > 0) {
		a = s0;
		b = s1;
		for (i = 1 to n) {
			if ((d = (c = (int)*a) - (int)*b) != 0 || c == 0) goto done;
			a = a + 1;
			b = b + 1;
		}
	done: ;
	}
}

function stpcpy(pointer d, pointer s)
returns pointer a
locals	pointer b
{
	a = d;
	b = s;
	while ((*a = (int)*b) != 0) {
		a = a + 1;
		b = b + 1;
	}
}

/*
	`buffer` needs to be at least `GAZL_WORD_SIZE + 2` in size (incl. terminating zero). Output will be right-aligned in
	this buffer and returned pointer is the first character, so the length of the output is
	`buffer + (GAZL_WORD_SIZE + 1) - returned pointer`. `minLength` is usually 1 (or `i == 0` will return an empty
	string), increasing it will add leading zeroes.
*/
const int GAZL_WORD_SIZE
function intToString(int i, int radix, int minLength, pointer buffer)
returns	pointer p
locals	pointer e, int x
{
	assert(2 <= radix && radix <= 16);
	assert(0 <= minLength && minLength <= GAZL_WORD_SIZE);
	
	*(p = buffer + GAZL_WORD_SIZE + 1) = 0;
	e = p - minLength;
	x = i;
	while (p > e || x != 0) {
		assert(p >= buffer + 2);
		*(p = p - 1) = ("fedcba9876543210123456789abcdef")[15 + x % radix];	// Mirrored hex string to handle negative x.
		x = x / radix;
	}
	if (i < 0) *(p = p - 1) = '-';
}

function stringToFloat(pointer b, pointer v)
returns	pointer p
locals	float f
		, float e
		, int n
		, int i
		, int c
		, pointer q
{
	p = b;
	f = 0.0;
	while ((c = (int) *p) >= '0' && c <= '9') {
		f = f * 10.0 + itof(c - '0');
		p = p + 1;
	}
	if ((int) *p == '.') {
		p = p + 1;
		e = 0.1;
		while ((c = (int) *p) >= '0' && c <= '9') {
			f = f + e * itof(c - '0');
			e = e * 0.1;
			p = p + 1;
		}
	}
	if ((c = (int) *p) == 'e' || c == 'E') {
		q = p + 1;
		e = 10.0;
		if ((c = (int) *q) == '+') q = q + 1;
		else if (c == '-') { e = 0.1; q = q + 1; }
		n = 0;
		while ((c = (int) *q) >= '0' && c <= '9') {
			n = n * 10 + (c - '0');
			q = q + 1;
			p = q;
		}
		if (n > 50) n = 50;
		for (i = 0 to n) f = f * e;
	}
	*v = f;
}

// buffer should hold at least 32 elements
function floatToString(float f, int precision, pointer buffer)
returns	pointer p
locals float x, float y, int e, float g, pointer dp, pointer pp, pointer ep, int i
{
	assert(1 <= precision && precision <= 24);

	y = abs(f);
	if (y <= EPSILON_FLOAT) p = "0";
	else if (y >= HUGE_FLOAT) p = "HUGE";
	else {
		e = 0;
		ep = buffer + 3 + precision;
		
		loop {
			pp = buffer + 3;
			x = y;
			
			// Normalize values > 10 and move period position.
			
			while (x >= 10.0 && pp < ep) {
				pp = pp + 1;
				x = x * 0.1;
			}
						
			if (pp < ep && y > SMALL_FLOAT && y < LARGE_FLOAT) goto break;
			
			// Exponential treatment of very small or large values.

			g = y;
			while (y < 1.0) {
				e = e - 1;
				y = y * 10.0;
			}
			while (y >= 10.0) {
				e = e + 1;
				y = y * 0.1;
			}
		}
	break:
		
		// For values < 1, spit out leading 0's and increase precision.

		dp = buffer + 2;
		while (x < 1.0 && dp < buffer + 32) {
			*dp = '0';
			dp = dp + 1;
			if (dp == pp) {	// Hop over period position (set to 9 to avoid when eliminating 9's).
				*dp = '9';
				dp = dp + 1;
			}
			ep = ep + 1;
			x = x * 10.0;
		}
		
		// Exhaust all remaining digits of mantissa into buffer.
		
		while (dp < ep) {
			i = ftoi(x);
			*dp = i + '0';
			dp = dp + 1;
			if (dp == pp) {	// Hop over period position (set to 9 to avoid when eliminating 9's).
				*dp = '9';
				dp = dp + 1;
			}
			x = (x - itof(i)) * 10.0;
		}
		
		// If remainder is >= 5, increment trailing 9's...
		
		p = buffer + 2;
		if (x >= 5.0) {
			while ((int) dp[-1] == '9') *(dp = dp - 1) = '0';
			
			// If we are at spare position, set to '1' and include, otherwise, increment last non-9.
			
			if (dp == p) *(p = p - 1) = '1';
			else dp[-1] = (int) dp[-1] + 1;
		}
		
		*pp = '.';
		
		// Trim trailing zeroes (and possibly '.').
		
		if (ep > pp) while ((int) ep[-1] == '0') ep = ep - 1;
		if (ep - 1 == pp) ep = ep - 1;
		
		// Add any exponent and negative sign.
		
		if (e != 0) {
			*ep = 'e';
			i = '+';
			if (e < 0) i = '-';
			*(ep = ep + 1) = i;
			i = abs(e);
			if (i >= 100) *(ep = ep + 1) = '0' + ((i / 100) % 10);
			if (i >= 10) *(ep = ep + 1) = '0' + ((i / 10) % 10);
			*(ep = ep + 1) = '0' + (i % 10);
			ep = ep + 1;
		}
		*ep = 0;

		if (f < 0.0) *(p = p - 1) = '-';
	}
}

function traceInts(pointer text, int n, pointer ints)
locals	array buffer[GAZL_WORD_SIZE + 2]
		, array line[1024]
		, int i
		, pointer p
{
	p = &line[0];
	if (text != null) p = (pointer) stpcpy(p, text);
	*p = 0;
	for (i = 0 to n) {
		if (i != 0) { *p = ','; p = p + 1; }
		p = (pointer) stpcpy(p, intToString(ints[i], 10, 1, buffer));
	}
	trace(line);
}

function traceInt(pointer text, int i)
locals	array ints[1]
{
	ints[0] = i;
	traceInts(text, 1, ints);
}

function traceFloats(pointer text, int n, pointer floats)
locals	array buffer[33]
		, array line[1024]
		, int i
		, pointer p
{
	p = &line[0];
	if (text != null) p = (pointer) stpcpy(p, text);
	*p = 0;
	for (i = 0 to n) {
		if (i != 0) { *p = ','; p = p + 1; }
		p = (pointer) stpcpy(p, floatToString(floats[i], 8, buffer));
	}
	trace(line);
}

function traceFloat(pointer text, float f)
locals	array floats[1]
{
	floats[0] = f;
	traceFloats(text, 1, floats);
}

function error(pointer s)
{
	trace(s);
	abort();
}

/* ------ Math ------ */

const float LOG2 = 0.69314718055994530942
const float LOG2R = 1.44269504088896340736
const float LOG10R = 0.43429448190325182765
const float E = 2.71828182845904523536
const float HALF_PI = 1.57079632679489661923
const float PI = 3.14159265358979323846
const float TWICE_PI = PI * 2.0
const float COS_EPSILON = 1.0e-6

/*
	Derived from:
	
			  oo
			 =====  n
		 x   \     x
		e  =  >    --
			 /     n!
			 =====
			 n = 0
	
	... which is the same as:
		
		1   x   x x   x x x
		- + - + --- + ----- + ...
		1   1   1*2   1*2*3
	
	... which is the same as:
	
		1   x   x x   x x x
		- + - + - - + - - - + ...
		1   1   1 2   1 2 3
		
	Negative x yields huge floating point precision problems so we negate x before and do 1.0 / y afterwards instead.
*/
function exp(float x)
returns	float y
locals	float a
		, float n
		, float m
		, float t
{
	m = abs(x);
	a = 1.0;
	n = 1.0;
	y = 1.0;
	do {
		t = y;
		a = a * m / n;
		y = y + a;
		n = n + 1.0;
	} while (y != t);
	if (x < 0.0) y = 1.0 / y;
}

/*
	Derived from:
	
					  oo
					 =====            n
					 \         n + 1 x
		log(1 + x) =  >    (-1)      --
					 /                n
					 =====
					 n = 1

	Taylor for log is only reliable between -0.5 and 0.5, so we scale beforehand.
*/
function log(float x)
returns float y
locals	float a
		, float b
		, float m
		, float n
		, float t
{
	if (x <= 0.0 || x >= 1.0e38) error("Domain error");
	else {
		b = 0.0;
		m = x;
		while (m < 0.5) { m = m * 2.0; b = b - LOG2; }
		while (m > 1.5) { m = m * 0.5; b = b + LOG2; }
		m = 1.0 - m;
		a = -1.0;
		n = 1.0;
		y = 0.0;
		do {
			t = y;
			a = a * m;
			y = y + a / n;
			n = n + 1.0;
		} while (y != t);
		y = y + b;
	}
}

function log2(float x)
returns float y
{
	y = (float) log(x) * LOG2R;
}

function log10(float x)
returns float y
{
	y = (float) log(x) * LOG10R;
}

function trunc(float x)
returns float y
{
	if (x < 0.0) y = -floor(-x);
	else y = floor(x);
}

function round(float x)
returns float y
{
	y = floor(x + 0.5);
}

function fmod(float x, float y)
returns float z
{
	if (y == 0.0) error("Division by zero");
	else z = x - (float) trunc(x / y) * y;
}

/*
	Derived from:
	
				 oo
				=====      n
				\      (-1)   2 n
		cos x =  >    ------ x
				/     (2 n)!
				=====
				n = 0
*/
function cos(float x)
returns	float y
locals	float a
		, float n
		, float m
		, float t
{
	m = (float) fmod(x, TWICE_PI);
	m = -m * m;
	a = 1.0;
	n = 1.0;
	y = 1.0;
	do {
		t = y;
		a = a * m / (n * n + n);
		y = y + a;
		n = n + 2.0;
	} while (y != t);
	if (abs(y) < COS_EPSILON) y = 0.0;
}

function sin(float x)
returns float y
{
	y = (float) cos(x - HALF_PI);
}

function tan(float x)
returns float y
locals	float c
{
	y = 0.0;
	c = (float) cos(x);
	if (c == 0.0) error("Domain error");
	else y = (float) sin(x) / c;
}

function pow(float x, float y)
returns float z
locals	float a
{
	z = 0.0;
	a = x;
	if (a < 0.0 && y == floor(y)) a = -a;
	if (a > 0.0) z = (float) exp((float) log(a) * y);
	else if (a < 0.0 || y <= 0.0) error("Domain error");
	if (a != x && (y * 0.5) != floor(y * 0.5)) z = -z;
}

function sqrt(float x)
returns float y
locals	float t
{
	if (x < 0.0) error("Domain error");
	y = x;
	t = 0.0;
	while (y != t) {
		t = y;
		y = 0.5 * (y + x / y);
	}
}

function ceil(float x)
returns float y
{
	y = -floor(-x);
}

global int xorShiftRandomSeedX = 123456789;
global int xorShiftRandomSeedY = 362436069;
function xorShiftRandom()
returns	int y
locals	int x
		, int t
{
	x = global xorShiftRandomSeedX;
	y = global xorShiftRandomSeedY;
	t = x ^ (x << 10);
	x = y;
	y = y ^ (y >>> 13) ^ t ^ (t >>> 10);
	global xorShiftRandomSeedX = x;
	global xorShiftRandomSeedY = y;
}

function minFloat(float a, float b)
returns float y
{
	y = a;
	if (b < y) y = b;
}

function maxFloat(float a, float b)
returns float y
{
	y = a;
	if (b > y) y = b;
}

function minInt(int a, int b)
returns int y
{
	y = a;
	if (b < y) y = b;
}

function maxInt(int a, int b)
returns int y
{
	y = a;
	if (b > y) y = b;
}
