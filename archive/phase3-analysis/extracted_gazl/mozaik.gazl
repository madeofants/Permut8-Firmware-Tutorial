
PRAWN_FIRMWARE_PATCH_FORMAT: ! DEFi #2
FALSE: ! DEFi #0
TRUE: ! DEFi #1
panelTextRows: CNST *8
DATA &.s_b1e34dcc &.s_b1e34dcc &.s_CRUSHb1e34dcd
DATA &.s_BLOCKRb1e34dce &.s_b1e34dcc &.s_b1e34dcc
DATA &.s_b1e34dcc &.s_BLOCKSb1e34dcf
GLOB *1
clock: DATi #0
params: GLOB *PARAM_COUNT
displayLEDs: GLOB *4
CNST *1
clockFreqLimit: DATi #132300
signal: GLOB *2
CNST *1
! SHLi <A> #1 #SWITCHES_PARAM_INDEX
! SHLi <B> #1 #OPERAND_1_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_1_LOW_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_LOW_PARAM_INDEX
! IORi <A> <A> <B>
updateMask: DATi <A>
LOG2: ! DEFf #0.69314718055994530942

error: FUNC
PARA *1
$s: INPp
MOVp %1 $s
CALL ^trace %0 *2
CALL ^abort %0 *1
RETU


exp: FUNC
$y: OUTf
$x: INPf
$a: LOCf
$n: LOCf
$m: LOCf
$t: LOCf
ABSf $m $x
MOVf $a #1.0
MOVf $n #1.0
MOVf $y #1.0
.l0: MOVf $t $y
MULf %0 $a $m
DIVf $a %0 $n
ADDf $y $y $a
ADDf $n $n #1.0
NEQf $y $t @.l0
GEQf $x #0.0 @.f1
DIVf $y #1.0 $y
.f1: RETU


log: FUNC
$y: OUTf
$x: INPf
$a: LOCf
$b: LOCf
$m: LOCf
$n: LOCf
$t: LOCf
LEQf $x #0.0 @.t0
LSSf $x #1.0e38 @.f1
.t0: MOVp %1 &.s_Domainb1e34dd0
CALL &error %0 *2
GOTO @.e2 
.f1: MOVf $b #0.0
MOVf $m $x
.l3: GEQf $m #0.5 @.e4
MULf $m $m #2.0
SUBf $b $b #LOG2
GOTO @.l3
.e4: NOOP
.l5: LEQf $m #1.5 @.e6
MULf $m $m #0.5
ADDf $b $b #LOG2
GOTO @.l5
.e6: SUBf $m #1.0 $m
MOVf $a #-1.0
MOVf $n #1.0
MOVf $y #0.0
.l7: MOVf $t $y
MULf $a $a $m
DIVf %0 $a $n
ADDf $y $y %0
ADDf $n $n #1.0
NEQf $y $t @.l7
ADDf $y $y $b
.e2: RETU


pow: FUNC
$z: OUTf
$x: INPf
$y: INPf
$a: LOCf
MOVf $z #0.0
MOVf $a $x
GEQf $a #0.0 @.f1
FLOf %0 $y 
NEQf $y %0 @.f1
SUBf $a #0.0 $a
.f1: LEQf $a #0.0 @.f2
MOVf %2 $a
CALL &log %1 *2
MULf %1 %1 $y
CALL &exp %0 *2
MOVf $z %0 
GOTO @.e3 
.f2: LSSf $a #0.0 @.t4
GRTf $y #0.0 @.f5
.t4: MOVp %1 &.s_Domainb1e34dd0
CALL &error %0 *2
.f5: NOOP
.e3: EQUf $a $x @.f7
MULf %0 $y #0.5
MULf %1 $y #0.5
FLOf %0 %0 
EQUf %1 %0 @.f7
SUBf $z #0.0 $z
.f7: RETU


logScale: FUNC
$y: OUTf
$x: INPf
$outFrom: INPf
$outTo: INPf
DIVf %1 $outTo $outFrom
MOVf %2 $x 
CALL &pow %0 *3
MULf $y $outFrom %0
RETU


decayConstant: FUNC
$factor: OUTf
$time: INPf
$reach: INPf
DIVf %2 #1.0 $reach
CALL &log %1 *2
DIVf %2 #-1.0 $time
MULf %1 %2 %1
CALL &exp %0 *2
MOVf $factor %0 
RETU

HP_EPSILON: ! DEFf #1.0e-011
HP_K: ! DEFf #0.0056828256022101
GLOB *1
wantsReset: DATi #FALSE
GLOB *1
breakLoop: DATi #FALSE
readRates: GLOB *256
blockLens: GLOB *256
minCycles: GLOB *256
thresDKs: GLOB *256

init: FUNC
PARA *1
$i: LOCi
$x: LOCf
$minCycle: LOCi
POKE &wantsReset #TRUE
POKE &breakLoop #TRUE
MOVi $i #0
GEQi #0 #256 @.e0
.l1: NOOP
! DIVf <A> #1.0 #256.0
iTOf $x $i <A>
MOVf %1 $x
MOVf %2 #32768.0 
MOVf %3 #131072.0 
CALL &logScale %0 *4
ADDf %0 %0 #0.5
fTOi %0 %0 #1.0
POKE &readRates $i %0
MOVf %1 $x
MOVf %2 #128.0 
MOVf %3 #32768.0 
CALL &logScale %0 *4
ADDf %0 %0 #0.5
fTOi %0 %0 #1.0
POKE &blockLens $i %0
MOVf %1 $x
MOVf %2 #10.0 
MOVf %3 #2000.0 
CALL &logScale %0 *4
ADDf %0 %0 #0.5
fTOi $minCycle %0 #1.0
POKE &minCycles $i $minCycle
iTOf %1 $minCycle #1.0
MOVf %2 #0.6666666 
CALL &decayConstant %0 *3
POKE &thresDKs $i %0
FORi $i #256 @.l1
.e0: POKE &blockLens:0 #0
RETU


update: FUNC
PARA *1
POKE &breakLoop #TRUE
RETU


process: FUNC
PARA *1
$inL: LOCf
$inR: LOCf
$yL: LOCf
$yR: LOCf
$y2: LOCA *2
$clock: LOCi
$wcLenL: LOCi
$wcLenR: LOCi
$blockCounter: LOCi
$newRCL: LOCi
$newRCR: LOCi
$hdL: LOCf
$hdR: LOCf
$lastYL: LOCf
$lastYR: LOCf
$cycleParam: LOCi
$minCycle: LOCi
$maxCycle: LOCi
$blockLen: LOCi
$readRate: LOCi
$rateCrushMask: LOCi
$bitCrushMask: LOCi
$wcStartL: LOCi
$ccStartL: LOCi
$ccLenL: LOCi
$rcStartL: LOCi
$rcLenL: LOCi
$playPosL: LOCi
$wcStartR: LOCi
$ccStartR: LOCi
$ccLenR: LOCi
$rcStartR: LOCi
$rcLenR: LOCi
$playPosR: LOCi
$thresPosL: LOCf
$thresNegL: LOCf
$thresPosR: LOCf
$thresNegR: LOCf
$thresDK: LOCf
$stageL: LOCi
$stageR: LOCi
$writeProtect: LOCi
$sync: LOCi
$reverseMask: LOCi
.l0: PEEK %0 &wantsReset
EQUi %0 #FALSE @.f1
MOVi $playPosL #0
MOVi $rcLenL #0 
MOVi $rcStartL #0 
MOVi $ccLenL #0 
MOVi $ccStartL #0 
MOVi $wcStartL #0 
MOVi $playPosR #0
MOVi $rcLenR #0 
MOVi $rcStartR #0 
MOVi $ccLenR #0 
MOVi $ccStartR #0 
MOVi $wcStartR #0 
MOVf $lastYR #0.0
MOVf $lastYL #0.0 
MOVf $thresNegR #0.0 
MOVf $thresPosR #0.0 
MOVf $thresNegL #0.0 
MOVf $thresPosL #0.0 
MOVi $stageR #0
MOVi $stageL #0 
MOVi $blockCounter #0
MOVi $newRCR #FALSE
MOVi $newRCL #FALSE 
POKE &wantsReset #FALSE
.f1: PEEK $cycleParam &params:OPERAND_2_HIGH_PARAM_INDEX
PEEK $minCycle &minCycles $cycleParam
MULi $maxCycle $minCycle #4
PEEK $thresDK &thresDKs $cycleParam
PEEK %0 &params:OPERAND_1_HIGH_PARAM_INDEX
PEEK $blockLen &blockLens %0
PEEK %0 &params:OPERAND_2_LOW_PARAM_INDEX
PEEK $readRate &readRates %0
PEEK %0 &params:OPERAND_1_LOW_PARAM_INDEX
ANDi %0 %0 #0xF
XORi $rateCrushMask %0 #-1
PEEK %0 &params:OPERAND_1_LOW_PARAM_INDEX
ANDi %0 %0 #0xF0
XORi $bitCrushMask %0 #-1
PEEK %0 &params:SWITCHES_PARAM_INDEX
ANDi $writeProtect %0 #SWITCHES_WRITE_PROTECT_MASK
MOVi $reverseMask #0
PEEK %0 &params:SWITCHES_PARAM_INDEX
ANDi %0 %0 #SWITCHES_REVERSE_MASK
EQUi %0 #0 @.f2
MOVi $reverseMask #0xFFFF
.f2: PEEK %0 &params:SWITCHES_PARAM_INDEX
ANDi $sync %0 #SWITCHES_SYNC_MASK
POKE &breakLoop #FALSE
.l3: PEEK %0 &breakLoop
NEQi %0 #FALSE @.l0
PEEK %0 &clock
XORi $clock %0 $reverseMask
NEQi $clock #0 @.f6
EQUi $sync #FALSE @.f6
MOVi $blockCounter #0
.f6: PEEK %0 &signal:0
! DIVf <A> #1.0 #2048.0
iTOf $inL %0 <A>
SUBf %0 $inL $hdL
ABSf %0 %0 
GEQf %0 #HP_EPSILON @.f7
MOVf $hdL $inL
GOTO @.e8 
.f7: SUBf %0 $inL $hdL
MULf %0 %0 #HP_K
ADDf $hdL $hdL %0
.e8: SUBf $yL $inL $hdL
PEEK %0 &signal:1
! DIVf <A> #1.0 #2048.0
iTOf $inR %0 <A>
SUBf %0 $inR $hdR
ABSf %0 %0 
GEQf %0 #HP_EPSILON @.f9
MOVf $hdR $inR
GOTO @.e10 
.f9: SUBf %0 $inR $hdR
MULf %0 %0 #HP_K
ADDf $hdR $hdR %0
.e10: SUBf $yR $inR $hdR
fTOi $y2:0 $yL #2048.0
fTOi $y2:1 $yR #2048.0
MOVi %1 $clock
MOVi %2 #1 
ADRL %3 $y2 *0
CALL ^write %0 *4
MULf $thresPosL $thresPosL $thresDK
MULf $thresNegL $thresNegL $thresDK
MULf $thresPosR $thresPosR $thresDK
MULf $thresNegR $thresNegR $thresDK
LSSf $yL $thresPosL @.f11
MOVf $thresPosL $yL
NEQi $stageL #0 @.f11
MOVi $stageL #1
.f11: GRTf $yL $thresNegL @.f13
MOVf $thresNegL $yL
NEQi $stageL #1 @.f13
MOVi $stageL #2
.f13: SUBi %0 $clock $wcStartL
ANDi $wcLenL %0 #0xFFFF
LSSi $wcLenL $maxCycle @.f15
MOVi $stageL #2
.f15: GRTf $lastYL #0.0 @.f17
LSSf $yL #0.0 @.f17
NEQi $stageL #2 @.f17
LSSi $wcLenL $minCycle @.f17
MOVi $stageL #0
MOVi $ccStartL $wcStartL
MOVi $ccLenL $wcLenL
MOVi $wcStartL $clock
.f17: LSSf $yR $thresPosR @.f18
MOVf $thresPosR $yR
NEQi $stageR #0 @.f18
MOVi $stageR #1
.f18: GRTf $yR $thresNegR @.f20
MOVf $thresNegR $yR
NEQi $stageR #1 @.f20
MOVi $stageR #2
.f20: SUBi %0 $clock $wcStartR
ANDi $wcLenR %0 #0xFFFF
LSSi $wcLenR $maxCycle @.f22
MOVi $stageR #2
.f22: GRTf $lastYR #0.0 @.f24
LSSf $yR #0.0 @.f24
NEQi $stageR #2 @.f24
LSSi $wcLenR $minCycle @.f24
MOVi $stageR #0
MOVi $ccStartR $wcStartR
MOVi $ccLenR $wcLenR
MOVi $wcStartR $clock
.f24: MOVf $lastYL $yL
MOVf $lastYR $yR
GRTi $blockCounter #0 @.f25
MOVi $blockCounter $blockLen
MOVi $newRCL #TRUE
MOVi $newRCR #TRUE
.f25: SUBi $blockCounter $blockCounter #1
SHRi %1 $playPosL #16
ANDi %1 %1 $rateCrushMask
XORi %1 %1 $reverseMask
ADDi %1 $rcStartL %1
MOVi %2 #1 
ADRL %3 $y2 *0
CALL ^read %0 *4
ANDi %0 $y2:0 $bitCrushMask
POKE &signal:0 %0 
SHRi %1 $playPosR #16
ANDi %1 %1 $rateCrushMask
XORi %1 %1 $reverseMask
ADDi %1 $rcStartR %1
MOVi %2 #1 
ADRL %3 $y2 *0
CALL ^read %0 *4
ANDi %0 $y2:1 $bitCrushMask
POKE &signal:1 %0 
ADDi $playPosL $playPosL $readRate
LSSi $playPosL $rcLenL @.f26
EQUi $newRCL #FALSE @.f28
NEQi $writeProtect #0 @.f28
ANDi %0 $rcLenL $reverseMask
ADDi $rcStartL $ccStartL %0
SHLi $rcLenL $ccLenL #16
MOVi $newRCL #FALSE
.f28: MOVi $playPosL #0
.f26: ADDi $playPosR $playPosR $readRate
LSSi $playPosR $rcLenR @.f29
EQUi $newRCR #FALSE @.f31
NEQi $writeProtect #0 @.f31
ANDi %0 $rcLenR $reverseMask
ADDi $rcStartR $ccStartR %0
SHLi $rcLenR $ccLenR #16
MOVi $newRCR #FALSE
.f31: MOVi $playPosR #0
.f29: CALL ^yield %0 *1
GOTO @.l3
GOTO @.l0
RETU

.s_b1e34dcc: CNST *2
DATi #32 #0
.s_CRUSHb1e34dcd: CNST *54
DATi #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #198
DATs ------- CRUSH --------
DATi #199 #0
.s_BLOCKRb1e34dce: CNST *54
DATi #32 #32 #32 #32 #198
DATs ----- BLOCK RATE -----
DATi #199 #32 #202
DATs -- BITS --
DATi #199 #198
DATs -- RATE --
DATi #204 #0
.s_BLOCKSb1e34dcf: CNST *54
DATi #32 #32 #32 #32 #198
DATs ----- BLOCK SIZE -----
DATi #199 #32 #198
DATs ---- PITCH SHIFT -----
DATi #199 #0
.s_Domainb1e34dd0: CNST *13
DATs Domain error
DATi #0
