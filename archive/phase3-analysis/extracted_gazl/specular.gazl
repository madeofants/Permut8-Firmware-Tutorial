PRAWN_FIRMWARE_PATCH_FORMAT: ! DEFi #2
FALSE: ! DEFi #0
TRUE: ! DEFi #1
panelTextRows: CNST *8
DATA &.s_684ca3d &.s_684ca3d &.s_THRESH684ca3e
DATA &.s_00FFlo684ca3f &.s_684ca3d &.s_684ca3d
DATA &.s_DECAYP684ca40 &.s_00FFx1684ca41
GLOB *1
clock: DATi #0
params: GLOB *PARAM_COUNT
displayLEDs: GLOB *4
GLOB *1
instance: DATi #0
CNST *1
clockFreqLimit: DATi #44100
signal: GLOB *2
error: FUNC
PARA *1
$s: INPp
MOVp %1 $s
CALL ^trace %0 *2
CALL ^abort %0 *1
RETU
LOG2: ! DEFf #0.69314718055994530942
LOG2R: ! DEFf #1.44269504088896340736
LOG10R: ! DEFf #0.43429448190325182765
E: ! DEFf #2.71828182845904523536
HALF_PI: ! DEFf #1.57079632679489661923
PI: ! DEFf #3.14159265358979323846
! MULf <A> #PI #2.0
TWICE_PI: ! DEFf <A>
COS_EPSILON: ! DEFf #1.0e-6
trunc: FUNC
$y: OUTf
$x: INPf
GEQf $x #0.0 @.f0
SUBf %0 #0.0 $x
FLOf %0 %0
SUBf $y #0.0 %0
GOTO @.e1
.f0: FLOf $y $x
.e1: RETU
fmod: FUNC
$z: OUTf
$x: INPf
$y: INPf
NEQf $y #0.0 @.f0
MOVp %1 &.s_Divisi684ca42
CALL &error %0 *2
GOTO @.e1
.f0: DIVf %1 $x $y
CALL &trunc %0 *2
MULf %0 %0 $y
SUBf $z $x %0
.e1: RETU
cos: FUNC
$y: OUTf
$x: INPf
$a: LOCf
$n: LOCf
$m: LOCf
$t: LOCf
MOVf %1 $x
MOVf %2 #TWICE_PI
CALL &fmod %0 *3
MOVf $m %0
SUBf %0 #0.0 $m
MULf $m %0 $m
MOVf $a #1.0
MOVf $n #1.0
MOVf $y #1.0
.l0: MOVf $t $y
MULf %0 $n $n
MULf %1 $a $m
ADDf %0 %0 $n
DIVf $a %1 %0
ADDf $y $y $a
ADDf $n $n #2.0
NEQf $y $t @.l0
ABSf %1 $y
GEQf %1 #COS_EPSILON @.f1
MOVf $y #0.0
.f1: RETU
sin: FUNC
$y: OUTf
$x: INPf
SUBf %1 $x #HALF_PI
CALL &cos %0 *2
MOVf $y %0
RETU
sqrt: FUNC
$y: OUTf
$x: INPf
$t: LOCf
GEQf $x #0.0 @.f0
MOVp %1 &.s_Domain684ca43
CALL &error %0 *2
.f0: MOVf $y $x
MOVf $t #0.0
.l1: EQUf $y $t @.e2
MOVf $t $y
DIVf %0 $x $y
ADDf %0 $y %0
MULf $y #0.5 %0
GOTO @.l1
.e2: RETU
FFT_POWER: ! DEFi #12
! SHLi <A> #1 #FFT_POWER
FFT_SIZE: ! DEFi <A>
! DIVi <A> #FFT_SIZE #2
FFT_SIZE_2: ! DEFi <A>
PROCESS_SPREAD_FACTOR: ! DEFi #5
! iTOf <A> #FFT_SIZE #1.0
! DIVf <A> #2.0 <A>
IFFT_SCALE: ! DEFf <A>
ANTI_DENORMAL_CONSTANT: ! DEFf #1.0e-10
PERFORM_RESET: ! DEFi #0
! ADDi <A> #PERFORM_RESET #1
ANALYSIS_WINDOW: ! DEFi <A>
! ADDi <A> #ANALYSIS_WINDOW #1
ANALYSIS_REINDEX: ! DEFi <A>
! ADDi <A> #ANALYSIS_REINDEX #1
ANALYSIS_FFT_2: ! DEFi <A>
! ADDi <A> #ANALYSIS_FFT_2 #FFT_POWER
! SUBi <A> <A> #1
ANALYSIS_UNTANGLE: ! DEFi <A>
! ADDi <A> #ANALYSIS_UNTANGLE #1
PROCESS_FIND_MAX: ! DEFi <A>
! ADDi <A> #PROCESS_FIND_MAX #1
PROCESS_FEEDBACK: ! DEFi <A>
! ADDi <A> #PROCESS_FEEDBACK #1
PROCESS_PARTIAL_1: ! DEFi <A>
! ADDi <A> #PROCESS_PARTIAL_1 #8
SYNTHESIS_SMEAR_LEFT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_SMEAR_LEFT #1
SYNTHESIS_UNTANGLE_LEFT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_UNTANGLE_LEFT #1
SYNTHESIS_REINDEX_LEFT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_REINDEX_LEFT #1
SYNTHESIS_FFT_LEFT_2: ! DEFi <A>
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #FFT_POWER
! SUBi <A> <A> #1
SYNTHESIS_MIX_LEFT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_MIX_LEFT #1
SYNTHESIS_SMEAR_RIGHT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_SMEAR_RIGHT #1
SYNTHESIS_UNTANGLE_RIGHT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_UNTANGLE_RIGHT #1
SYNTHESIS_REINDEX_RIGHT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_REINDEX_RIGHT #1
SYNTHESIS_FFT_RIGHT_2: ! DEFi <A>
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #FFT_POWER
! SUBi <A> <A> #1
SYNTHESIS_MIX_RIGHT: ! DEFi <A>
! ADDi <A> #SYNTHESIS_MIX_RIGHT #1
PROCESS_STEPS: ! DEFi <A>
THRESHOLD_PARAM: ! DEFi #OPERAND_1_HIGH_PARAM_INDEX
BAND_PARAM: ! DEFi #OPERAND_1_LOW_PARAM_INDEX
DECAY_PARAM: ! DEFi #OPERAND_2_HIGH_PARAM_INDEX
PARTIALS_PARAM: ! DEFi #OPERAND_2_LOW_PARAM_INDEX
CNST *1
! SHLi <A> #1 #THRESHOLD_PARAM
! SHLi <B> #1 #DECAY_PARAM
! IORi <A> <A> <B>
updateMask: DATi <A>
GLOB *1
doReset: DATi #TRUE
window: GLOB *FFT_SIZE_2
cRotateRe: GLOB *256
cRotateIm: GLOB *256
partialGains: GLOB *8
! SUBi <A> #FFT_POWER #1
fftWPRe: GLOB *<A>
! SUBi <A> #FFT_POWER #1
fftWPIm: GLOB *<A>
GLOB *1
threshold: DATf #0.0
GLOB *1
decayConstant: DATf #0.0
GLOB *1
outputGain: DATf #0.0
randomArray: GLOB *FFT_SIZE_2
untangleParams: GLOB *2
fftReIndex: FUNC
PARA *1
$n: INPi
$data: INPp
$nn: LOCi
$j: LOCi
$i: LOCi
$m: LOCi
$t: LOCf
SHRi $nn $n #1
MOVi $j #0
MOVi $i #0
.l0: GEQi $i $n @.e1
LEQi $j $i @.f2
PEEK $t $data $j
PEEK %0 $data $i
POKE $data $j %0
POKE $data $i $t
ADDi %0 $j #1
PEEK $t $data %0
ADDi %0 $j #1
ADDi %1 $i #1
PEEK %1 $data %1
POKE $data %0 %1
ADDi %1 $i #1
POKE $data %1 $t
.f2: MOVi $m $nn
.l3: LSSi $m #2 @.e5
LSSi $j $m @.e5
SUBi $j $j $m
SHRi $m $m #1
GOTO @.l3
.e5: ADDi $j $j $m
ADDi $i $i #2
GOTO @.l0
.e1: RETU
fftPass: FUNC
PARA *1
$n: INPi
$data: INPp
$fftStep: INPi
$mmax: LOCi
$i: LOCi
$i1: LOCi
$j: LOCi
$j1: LOCi
$m: LOCi
$wTemp: LOCf
$wpRe: LOCf
$wpIm: LOCf
$wRe: LOCf
$wIm: LOCf
$tempRe: LOCf
$tempIm: LOCf
$dj0: LOCf
$dj1: LOCf
$di0: LOCf
$di1: LOCf
SHLi $mmax #2 $fftStep
PEEK $wpRe &fftWPRe $fftStep
PEEK $wpIm &fftWPIm $fftStep
MOVf $wRe #1.0
MOVf $wIm #0.0
MOVi $m #0
.l0: MOVi $i $m
.l1: GEQi $i $n @.e2
ADDi $j $i $mmax
ADDi $i1 $i #1
ADDi $j1 $j #1
PEEK $dj0 $data $j
PEEK $dj1 $data $j1
PEEK $di0 $data $i
PEEK $di1 $data $i1
MULf %1 $wRe $dj0
MULf %0 $wIm $dj1
SUBf $tempRe %1 %0
MULf %1 $wRe $dj1
MULf %0 $wIm $dj0
ADDf $tempIm %1 %0
SUBf %1 $di0 $tempRe
POKE $data $j %1
SUBf %1 $di1 $tempIm
POKE $data $j1 %1
ADDf %1 $di0 $tempRe
POKE $data $i %1
ADDf %1 $di1 $tempIm
POKE $data $i1 %1
ADDi $i $j $mmax
GOTO @.l1
.e2: MOVf $wTemp $wRe
MULf %1 $wRe $wpRe
MULf %0 $wIm $wpIm
SUBf %1 %1 %0
ADDf $wRe $wRe %1
MULf %1 $wIm $wpRe
MULf %0 $wTemp $wpIm
ADDf %1 %1 %0
ADDf $wIm $wIm %1
ADDi $m $m #2
LSSi $m $mmax @.l0
RETU
fftUntangleParams: FUNC
PARA *1
$n: INPi
$params: INPp
$wpRe: LOCf
$wpIm: LOCf
MOVf %1 #2.0
CALL &sqrt %0 *2
! MULf <A> #2.0 #PI
! MULf <A> <A> #0.5
iTOf %2 $n #1.0
DIVf %2 <A> %2
CALL &sin %1 *2
MULf $wpRe %0 %1
MULf $wpRe $wpRe $wpRe
! MULf <A> #2.0 #PI
iTOf %1 $n #1.0
DIVf %1 <A> %1
CALL &sin %0 *2
MOVf $wpIm %0
POKE $params #0 $wpRe
POKE $params #1 $wpIm
RETU
fftUntangle: FUNC
PARA *1
$n: INPi
$data: INPp
$params: INPp
$indexA: LOCi
$indexB: LOCi
$i: LOCi
$r0: LOCf
$i0: LOCf
$wRe: LOCf
$wIm: LOCf
$wpRe: LOCf
$wpIm: LOCf
$nwr: LOCf
$nwy: LOCf
$r1: LOCf
$i1: LOCf
$r0r1: LOCf
$i0i1: LOCf
$i0i1wr: LOCf
$i0i1wi: LOCf
$r1r0wr: LOCf
$r0r1wi: LOCf
$re0: LOCf
$im0: LOCf
$re1: LOCf
$im1: LOCf
PEEK $r0 $data #0
PEEK $i0 $data #1
ADDf %0 $r0 $i0
POKE $data #0 %0
SUBf %0 $r0 $i0
POKE $data #1 %0
MOVf $wRe #1.0
MOVf $wIm #0.0
PEEK $wpRe $params #0
PEEK $wpIm $params #1
MOVi $indexA #2
SUBi $indexB $n #2
MOVi $i #1
DIVi %0 $n #4
GEQi #1 %0 @.e0
.l1: MULf %1 $wRe $wpRe
SUBf %1 $wRe %1
MULf %2 $wIm $wpIm
SUBf $nwr %1 %2
MULf %1 $wRe $wpIm
ADDf %1 %1 $wIm
MULf %2 $wIm $wpRe
SUBf $nwy %1 %2
MOVf $wRe $nwr
MOVf $wIm $nwy
PEEK $r0 $data $indexA
ADDi %1 $indexA #1
PEEK $i0 $data %1
PEEK $r1 $data $indexB
ADDi %1 $indexB #1
PEEK $i1 $data %1
ADDf $r0r1 $r0 $r1
SUBf $i0i1 $i0 $i1
ADDf %1 $i0 $i1
MULf $i0i1wr %1 $wRe
ADDf %1 $i0 $i1
MULf $i0i1wi %1 $wIm
SUBf %1 $r1 $r0
MULf $r1r0wr %1 $wRe
SUBf %1 $r0 $r1
MULf $r0r1wi %1 $wIm
SUBf %1 $i0i1wr $r0r1wi
ADDf %1 %1 $r0r1
MULf $re0 #0.5 %1
SUBf %1 $r1r0wr $i0i1wi
ADDf %1 %1 $i0i1
MULf $im0 #0.5 %1
SUBf %1 $r0r1wi $i0i1wr
ADDf %1 %1 $r0r1
MULf $re1 #0.5 %1
SUBf %1 $r1r0wr $i0i1wi
SUBf %1 %1 $i0i1
MULf $im1 #0.5 %1
POKE $data $indexA $re0
ADDi %1 $indexA #1
POKE $data %1 $im0
POKE $data $indexB $re1
ADDi %1 $indexB #1
POKE $data %1 $im1
ADDi $indexA $indexA #2
SUBi $indexB $indexB #2
FORi $i %0 @.l1
.e0: RETU
mixOutput: FUNC
PARA *1
$fftBuffer: INPp
$mixBuffer: INPp
$mixBufferOffset: INPi
$channel: INPi
$i: LOCi
$i2: LOCi
ADDi $i2 $mixBufferOffset $channel
MOVi $i #0
GEQi #0 #FFT_SIZE_2 @.e0
.l1: PEEK %0 $fftBuffer $i
PEEK %1 &window $i
MULf %0 %0 %1
PEEK %1 $mixBuffer $i2
fTOi %0 %0 #2048.0
ADDi %1 %1 %0
POKE $mixBuffer $i2 %1
ADDi $i2 $i2 #2
FORi $i #FFT_SIZE_2 @.l1
.e0: SUBi %1 #FFT_SIZE $mixBufferOffset
ADDi $i2 %1 $channel
MOVi $i #FFT_SIZE_2
GEQi #FFT_SIZE_2 #FFT_SIZE @.e2
.l3: NOOP
! SUBi <A> #FFT_SIZE #1
SUBi %1 <A> $i
PEEK %0 $fftBuffer $i
PEEK %1 &window %1
MULf %0 %0 %1
fTOi %0 %0 #2048.0
POKE $mixBuffer $i2 %0
ADDi $i2 $i2 #2
FORi $i #FFT_SIZE @.l3
.e2: RETU
init: FUNC
PARA *1
$i: LOCi
$theta: LOCf
$wTemp: LOCf
$prng: LOCi
MOVp %1 &.s_init684ca44
CALL ^trace %0 *2
MOVi $i #0
GEQi #0 #FFT_SIZE_2 @.e0
.l1: NOOP
! iTOf <A> #FFT_SIZE #1.0
! DIVf <A> #PI <A>
iTOf %1 $i <A>
CALL &sin %0 *2
POKE &window $i %0
FORi $i #FFT_SIZE_2 @.l1
.e0: MOVi $i #0
GEQi #0 #256 @.e2
.l3: NOOP
! MULf <A> #2.0 #PI
! DIVf <A> <A> #256.0
iTOf $theta $i <A>
MOVf %1 $theta
CALL &cos %0 *2
POKE &cRotateRe $i %0
MOVf %1 $theta
CALL &sin %0 *2
POKE &cRotateIm $i %0
FORi $i #256 @.l3
.e2: MOVi $i #0
GEQi #0 #8 @.e4
.l5: ADDi %1 $i #1
iTOf %1 %1 #1.0
CALL &sqrt %0 *2
DIVf %0 #IFFT_SCALE %0
POKE &partialGains $i %0
FORi $i #8 @.l5
.e4: MOVi $i #0
! SUBi <A> #FFT_POWER #1
GEQi #0 <A> @.e6
.l7: SHLi %0 #2 $i
! MULf <B> #2.0 #PI
iTOf %0 %0 #1.0
DIVf %0 <B> %0
SUBf $theta #0.0 %0
MULf %1 #0.5 $theta
CALL &sin %0 *2
MOVf $wTemp %0
MULf %0 #-2.0 $wTemp
MULf %0 %0 $wTemp
POKE &fftWPRe $i %0
MOVf %1 $theta
CALL &sin %0 *2
POKE &fftWPIm $i %0
FORi $i <A> @.l7
.e6: PEEK %0 &instance
SHLi %0 %0 #13
XORi $prng #2463534242 %0
MOVi $i #1
GEQi #1 #FFT_SIZE_2 @.e8
.l9: SHLi %0 $prng #13
XORi $prng $prng %0
SHRu %0 $prng #17
XORi $prng $prng %0
SHLi %0 $prng #5
XORi $prng $prng %0
ANDi %0 $prng #255
POKE &randomArray $i %0
FORi $i #FFT_SIZE_2 @.l9
.e8: MOVi %1 #FFT_SIZE
MOVp %2 &untangleParams
CALL &fftUntangleParams %0 *3
RETU
reset: FUNC
PARA *1
MOVp %1 &.s_reset684ca45
CALL ^trace %0 *2
POKE &doReset #TRUE
RETU
update: FUNC
PARA *1
$f: LOCf
MOVp %1 &.s_update684ca46
CALL ^trace %0 *2
PEEK %0 &params:THRESHOLD_PARAM
! DIVf <A> #1.0 #255.0
iTOf $f %0 <A>
MULf %0 $f $f
MULf $f %0 $f
POKE &threshold $f
PEEK %0 &params:THRESHOLD_PARAM
ADDi %0 %0 #16
SHRu %0 %0 #5
SHRi %0 #0xFF %0
XORi %0 %0 #-1
POKE &displayLEDs:0 %0
PEEK %0 &params:DECAY_PARAM
! DIVf <A> #1.0 #255.0
iTOf %0 %0 <A>
SUBf $f #1.0 %0
MULf %0 $f $f
MULf %0 %0 $f
SUBf %0 #1.0 %0
POKE &decayConstant %0
PEEK %0 &params:DECAY_PARAM
ADDi %0 %0 #16
SHRu %0 %0 #5
SHRi %0 #0xFF %0
XORi %0 %0 #-1
POKE &displayLEDs:2 %0
PEEK %2 &decayConstant
SUBf %2 #1.0 %2
CALL &sqrt %1 *2
CALL &sqrt %0 *2
POKE &outputGain %0
RETU
process: FUNC
PARA *1
! MULi <A> #FFT_SIZE #2
$fftBuffer: LOCA *FFT_SIZE
$inputBuffer: LOCA *FFT_SIZE
$clock: LOCi
$i: LOCi
$i2: LOCi
$processStep: LOCi
$useThreshold: LOCf
$bandBits: LOCi
$nextBandBit: LOCi
$re: LOCf
$im: LOCf
$power: LOCf
$feedbackRe: LOCA *FFT_SIZE_2
$feedbackIm: LOCA *FFT_SIZE_2
$k: LOCf
$partial: LOCi
$partialBase1: LOCi
$partialBase1Div2: LOCi
$g: LOCf
$cMulARe: LOCf
$cMulAIm: LOCf
$cMulBRe: LOCf
$cMulBIm: LOCf
$cMulRe: LOCf
$cMulIm: LOCf
$rotateIndex: LOCi
$x: LOCi
$y: LOCi
$t: LOCi
$prng: LOCi
$mixBuffer: LOCA *<A>
$mixBufferOffset: LOCi
$myInstance: LOCi
$includedBits: LOCi
POKE &doReset #TRUE
PEEK $t &instance
MOVi $myInstance #0
MOVi $i #0
GEQi #0 #PROCESS_SPREAD_FACTOR @.e0
.l1: SHLi %0 $myInstance #1
ANDi %1 $t #1
IORi $myInstance %0 %1
SHRi $t $t #1
FORi $i #PROCESS_SPREAD_FACTOR @.l1
.e0: SHLi %0 $myInstance #13
XORi $prng #2463534242 %0
MOVi $i #0
GEQi #0 #FFT_SIZE @.e2
.l3: SETL $inputBuffer $i #0.0
FORi $i #FFT_SIZE @.l3
.e2: MOVi $mixBufferOffset #0
MOVi $processStep #PROCESS_STEPS
.l4: PEEK $clock &clock
! SHLi <A> #1 #PROCESS_SPREAD_FACTOR
! SUBi <A> <A> #1
ANDi %0 $clock <A>
NEQi %0 $myInstance @.f5
ADDi $processStep $processStep #1
! SUBi <A> #FFT_SIZE_2 #1
ANDi %0 $clock <A>
NEQi %0 $myInstance @.f6
MOVi $processStep #PERFORM_RESET
.f6: SWCH $processStep *PROCESS_STEPS @.s7
.s7#PERFORM_RESET: PEEK %0 &doReset
EQUi %0 #FALSE @.e8
POKE &doReset #FALSE
MOVi $i #0
GEQi #0 #FFT_SIZE_2 @.e10
.l11: SETL $feedbackIm $i #0.0
SETL $feedbackRe $i #0.0
FORi $i #FFT_SIZE_2 @.l11
.e10: MOVi $i #0
GEQi #0 #FFT_SIZE @.e12
.l13: SETL $mixBuffer $i #0
FORi $i #FFT_SIZE @.l13
.e12: MOVi $mixBufferOffset #0
GOTO @.e8
.s7#ANALYSIS_WINDOW: MOVi $i #0
GEQi #0 #FFT_SIZE_2 @.e14
.l15: SUBi %0 $clock #FFT_SIZE
ADDi %0 %0 $i
! SUBi <A> #FFT_SIZE #1
ANDi %0 %0 <A>
GETL %0 $inputBuffer %0
PEEK %1 &window $i
MULf %0 %0 %1
SETL $fftBuffer $i %0
FORi $i #FFT_SIZE_2 @.l15
.e14: MOVi $i #FFT_SIZE_2
GEQi #FFT_SIZE_2 #FFT_SIZE @.e8
.l17: SUBi %0 $clock #FFT_SIZE
ADDi %0 %0 $i
! SUBi <A> #FFT_SIZE #1
ANDi %0 %0 <A>
! SUBi <A> #FFT_SIZE #1
SUBi %1 <A> $i
GETL %0 $inputBuffer %0
PEEK %1 &window %1
MULf %0 %0 %1
SETL $fftBuffer $i %0
FORi $i #FFT_SIZE @.l17
GOTO @.e8
.s7#ANALYSIS_REINDEX: NOOP
.s7#SYNTHESIS_REINDEX_LEFT: NOOP
.s7#SYNTHESIS_REINDEX_RIGHT: MOVi %1 #FFT_SIZE
ADRL %2 $fftBuffer *0
CALL &fftReIndex %0 *3
GOTO @.e8
.s7#ANALYSIS_FFT_2: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #1
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #2
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #3
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #4
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #5
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #6
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #7
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #8
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #9
.s7#<A>: NOOP
! ADDi <A> #ANALYSIS_FFT_2 #10
.s7#<A>: MOVi %1 #FFT_SIZE
ADRL %2 $fftBuffer *0
SUBi %3 $processStep #ANALYSIS_FFT_2
CALL &fftPass %0 *4
GOTO @.e8
.s7#ANALYSIS_UNTANGLE: NOOP
.s7#SYNTHESIS_UNTANGLE_LEFT: NOOP
.s7#SYNTHESIS_UNTANGLE_RIGHT: MOVi %1 #FFT_SIZE
ADRL %2 $fftBuffer *0
MOVp %3 &untangleParams
CALL &fftUntangle %0 *4
GOTO @.e8
.s7#PROCESS_FIND_MAX: MOVf $useThreshold #0.0
PEEK $bandBits &params:BAND_PARAM
! SUBi <A> #FFT_POWER #8
! SHLi <A> #1 <A>
MOVi $nextBandBit <A>
MOVi $i #1
GEQi #1 #FFT_SIZE_2 @.e18
.l19: NEQi $i $nextBandBit @.f20
SHLi $nextBandBit $nextBandBit #1
SHLi $bandBits $bandBits #1
.f20: MULi $i2 $i #2
ANDi %0 $bandBits #0x80
NEQi %0 #0 @.f21
SETL $fftBuffer $i2 #0.0
ADDi %0 $i2 #1
SETL $fftBuffer %0 #0.0
GOTO @.e22
.f21: GETL $re $fftBuffer $i2
ADDi %0 $i2 #1
GETL $im $fftBuffer %0
MULf %0 $re $re
MULf %1 $im $im
ADDf $power %0 %1
LEQf $power $useThreshold @.f23
MOVf $useThreshold $power
.f23: NOOP
.e22: FORi $i #FFT_SIZE_2 @.l19
.e18: PEEK %0 &threshold
MULf $useThreshold $useThreshold %0
GOTO @.e8
.s7#PROCESS_FEEDBACK: PEEK $k &decayConstant
! SUBi <A> #FFT_POWER #8
! SHLi <A> #1 <A>
MOVi $nextBandBit <A>
MOVi $includedBits #0
MOVi $i #1
GEQi #1 #FFT_SIZE_2 @.e24
.l25: GETL %0 $feedbackRe $i
MULf %0 %0 $k
ADDf %0 %0 #ANTI_DENORMAL_CONSTANT
SETL $feedbackRe $i %0
GETL %0 $feedbackIm $i
MULf %0 %0 $k
ADDf %0 %0 #ANTI_DENORMAL_CONSTANT
SETL $feedbackIm $i %0
LEQi $i #256 @.f27
ANDi %0 $i #15
NEQi %0 #0 @.f27
! DIVf <A> #1.0 #256.0
! SUBf <A> #1.0 <A>
MULf $k $k <A>
.f27: NEQi $i $nextBandBit @.f28
SHLi $nextBandBit $nextBandBit #1
SHLi $includedBits $includedBits #1
.f28: MULi $i2 $i #2
GETL $re $fftBuffer $i2
ADDi %0 $i2 #1
GETL $im $fftBuffer %0
MULf %0 $re $re
MULf %1 $im $im
ADDf %0 %0 %1
GEQf %0 $useThreshold @.f29
SETL $fftBuffer $i2 #0.0
ADDi %0 $i2 #1
SETL $fftBuffer %0 #0.0
GOTO @.e30
.f29: IORi $includedBits $includedBits #1
.e30: FORi $i #FFT_SIZE_2 @.l25
.e24: PEEK %0 &params:BAND_PARAM
ANDi %0 $includedBits %0
POKE &displayLEDs:1 %0
GOTO @.e8
.s7#PROCESS_PARTIAL_1: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #1
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #2
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #3
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #4
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #5
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #6
.s7#<A>: NOOP
! ADDi <A> #PROCESS_PARTIAL_1 #7
.s7#<A>: SUBi $partial $processStep #PROCESS_PARTIAL_1
PEEK %0 &params:PARTIALS_PARAM
SHRu %1 #128 $partial
ANDi %0 %0 %1
EQUi %0 #0 @.e8
PEEK %0 &outputGain
PEEK %1 &partialGains $partial
MULf $g %0 %1
ADDi $partialBase1 $partial #1
DIVi $partialBase1Div2 $partialBase1 #2
MOVi $i #1
GEQi #1 #FFT_SIZE_2 @.e8
.l33: ADDi %0 $i $partialBase1Div2
DIVi %0 %0 $partialBase1
MULi $i2 %0 #2
GETL %0 $fftBuffer $i2
GETL %1 $feedbackRe $i
MULf %0 %0 $g
ADDf %1 %1 %0
SETL $feedbackRe $i %1
ADDi %1 $i2 #1
GETL %1 $fftBuffer %1
GETL %0 $feedbackIm $i
MULf %1 %1 $g
ADDf %0 %0 %1
SETL $feedbackIm $i %0
FORi $i #FFT_SIZE_2 @.l33
GOTO @.e8
.s7#SYNTHESIS_SMEAR_LEFT: NOOP
.s7#SYNTHESIS_SMEAR_RIGHT: MOVi $i #1
GEQi #1 #FFT_SIZE_2 @.e34
.l35: ADDi %0 $prng $i
! SUBi <A> #FFT_SIZE_2 #1
ANDi %0 %0 <A>
PEEK $rotateIndex &randomArray %0
PEEK $cMulARe &cRotateRe $rotateIndex
PEEK $cMulAIm &cRotateIm $rotateIndex
GETL $cMulBRe $feedbackRe $i
GETL $cMulBIm $feedbackIm $i
MULf %0 $cMulARe $cMulBRe
MULf %1 $cMulAIm $cMulBIm
SUBf $cMulRe %0 %1
MULf %0 $cMulAIm $cMulBRe
MULf %1 $cMulARe $cMulBIm
ADDf $cMulIm %0 %1
SETL $feedbackRe $i $cMulRe
SETL $feedbackIm $i $cMulIm
SUBi %0 #FFT_SIZE_2 $i
MULi $i2 %0 #2
SETL $fftBuffer $i2 $cMulRe
ADDi %0 $i2 #1
SETL $fftBuffer %0 $cMulIm
FORi $i #FFT_SIZE_2 @.l35
.e34: MOVf $fftBuffer:0 #0.0
MOVf $fftBuffer:1 #0.0
SHLi %0 $prng #13
XORi $prng $prng %0
SHRu %0 $prng #17
XORi $prng $prng %0
SHLi %0 $prng #5
XORi $prng $prng %0
GOTO @.e8
.s7#SYNTHESIS_FFT_LEFT_2: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #1
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #2
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #3
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #4
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #5
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #6
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #7
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #8
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #9
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_LEFT_2 #10
.s7#<A>: MOVi %1 #FFT_SIZE
ADRL %2 $fftBuffer *0
SUBi %3 $processStep #SYNTHESIS_FFT_LEFT_2
CALL &fftPass %0 *4
GOTO @.e8
.s7#SYNTHESIS_FFT_RIGHT_2: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #1
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #2
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #3
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #4
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #5
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #6
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #7
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #8
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #9
.s7#<A>: NOOP
! ADDi <A> #SYNTHESIS_FFT_RIGHT_2 #10
.s7#<A>: MOVi %1 #FFT_SIZE
ADRL %2 $fftBuffer *0
SUBi %3 $processStep #SYNTHESIS_FFT_RIGHT_2
CALL &fftPass %0 *4
GOTO @.e8
.s7#SYNTHESIS_MIX_LEFT: ADRL %1 $fftBuffer *0
ADRL %2 $mixBuffer *0
MOVi %3 $mixBufferOffset
MOVi %4 #0
CALL &mixOutput %0 *5
GOTO @.e8
.s7#SYNTHESIS_MIX_RIGHT: ADRL %1 $fftBuffer *0
ADRL %2 $mixBuffer *0
MOVi %3 $mixBufferOffset
MOVi %4 #1
CALL &mixOutput %0 *5
! SUBi <A> #FFT_SIZE_2 #1
! XORi <A> <A> #-1
ANDi %1 $clock <A>
! SHLi <A> #PROCESS_STEPS #PROCESS_SPREAD_FACTOR
ADDi %1 %1 <A>
MOVi %2 #FFT_SIZE_2
ADRL %3 $mixBuffer *0
ADDp %3 %3 $mixBufferOffset
CALL ^write %0 *4
SUBi $mixBufferOffset #FFT_SIZE $mixBufferOffset
.s7: NOOP
.e8: NOOP
.f5: NOOP
! SUBi <A> #FFT_SIZE #1
ANDi %0 $clock <A>
PEEK %1 &signal:0
PEEK %2 &signal:1
ADDi %1 %1 %2
! MULf <A> #2048.0 #2.0
! DIVf <A> #1.0 <A>
iTOf %1 %1 <A>
SETL $inputBuffer %0 %1
MOVi %1 $clock
MOVi %2 #1
MOVp %3 &signal
CALL ^read %0 *4
CALL ^yield %0 *1
GOTO @.l4
RETU
.s_684ca3d: CNST *2
DATi #32 #0
.s_THRESH684ca3e: CNST *53
DATi #32 #32 #32 #32 #32
DATs _____ THRESHOLD ______   _______ BANDS ________
DATi #0
.s_00FFlo684ca3f: CNST *53
DATi #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32
DATs 00 -> FF           low      mid      high
DATi #0
.s_DECAYP684ca40: CNST *53
DATi #32 #32 #32 #32 #32
DATs ________ DECAY _______   ______ PARTIALS ______
DATi #0
.s_00FFx1684ca41: CNST *53
DATi #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32 #32
DATs 00 -> FF         x1 x2 x3 x4 x5 x6 x7 x8
DATi #0
.s_Divisi684ca42: CNST *17
DATs Division by zero
DATi #0
.s_Domain684ca43: CNST *13
DATs Domain error
DATi #0
.s_init684ca44: CNST *5
DATs init
DATi #0
.s_reset684ca45: CNST *6
DATs reset
DATi #0
.s_update684ca46: CNST *7
DATs update
DATi #0
