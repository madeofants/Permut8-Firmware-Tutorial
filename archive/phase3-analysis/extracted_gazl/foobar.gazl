PRAWN_FIRMWARE_PATCH_FORMAT: ! DEFi #3
FALSE: ! DEFi #0
TRUE: ! DEFi #1
panelTextRows: CNST *8
DATA &.s_stdREVf5ba065b &.s_fastCRf5ba065c
DATA &.s_slowCHf5ba065d &.s_rndAK4f5ba065e
DATA &.s_1616f5ba065f &.s_3216f5ba0660 &.s_88f5ba0661
DATA &.s_168Gatf5ba0662
GLOB *1
clock: DATi #0
GLOB *1
hostPosition: DATi #0
params: GLOB *PARAM_COUNT
displayLEDs: GLOB *4
CNST *1
clockFreqLimit: DATi #132300
signal: GLOB *2
CNST *1
! SHLi <A> #1 #OPERATOR_1_PARAM_INDEX
! SHLi <B> #1 #OPERAND_1_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_1_LOW_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERATOR_2_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_LOW_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #SWITCHES_PARAM_INDEX
! IORi <A> <A> <B>
updateMask: DATi <A>
GLOB *1
rndSeedX: DATi #1
GLOB *1
rndSeedY: DATi #1
seedRandom: FUNC
PARA *1
$seed: INPi
$x: LOCi
ADDi $x $seed #1
SHLi %0 $x #11
XORi $x $x %0
MULi %0 $x #134775813
SHRu %0 %0 #13
MULi $x $x %0
SHRu %0 $x #17
XORi $x $x %0
POKE &rndSeedX $x
POKE &rndSeedY #1
RETU
randomFloat: FUNC
$f: OUTf
$x: LOCi
$y: LOCi
$t: LOCi
PEEK $x &rndSeedX
PEEK $y &rndSeedY
SHLi %0 $x #10
XORi $t $x %0
MOVi $x $y
SHRu %0 $y #13
XORi %0 $y %0
XORi %0 %0 $t
SHRu %1 $t #10
XORi $y %0 %1
ADDi %0 $x $y
ABSi %0 %0
iTOf $f %0 #4.6566128730774e-10
POKE &rndSeedX $x
POKE &rndSeedY $y
RETU
STEP_COUNT: ! DEFi #32
REVERSE_FX: ! DEFi #0
BIT_CRUSH_EFFECT: ! DEFi #1
TRANCE_GATE_EFFECT: ! DEFi #2
REPEAT_EFFECT: ! DEFi #3
STRETCH_EFFECT: ! DEFi #4
PITCH_SHIFT_EFFECT: ! DEFi #5
HALF_SPEED_EFFECT: ! DEFi #6
TAPE_STOP_FX: ! DEFi #7
FX_PARAM_TAPE_STOP_RATE: ! DEFi #0
FX_PARAM_TRANCE_GATE_RATE: ! DEFi #1
FX_PARAM_BIT_CRUSH_MASK: ! DEFi #2
FX_PARAM_REPEAT_MASK: ! DEFi #3
FX_PARAM_REPEAT_OFF_3: ! DEFi #4
FX_PARAM_SHIFT_9: ! DEFi #5
FX_PARAM_SHIFT_10: ! DEFi #6
FX_PARAM_1_LSHIFT_9: ! DEFi #7
FX_PARAM_1_LSHIFT_10: ! DEFi #8
FX_PARAM_MASK_10: ! DEFi #9
FX_PARAM_COUNT: ! DEFi #10
! MULi <A> #FX_PARAM_COUNT #3
FX_PARAMS: GLOB *<A>
stepFXs: GLOB *STEP_COUNT
stepFXParams: GLOB *STEP_COUNT
GLOB *1
doReset: DATi #TRUE
GLOB *1
updateBits: DATi #TRUE
GLOB *1
clockMask: DATi #0x1FFFF
GLOB *1
clockShift: DATi #13
GLOB *1
fxQuantize: DATi #0xFFF
GLOB *1
dirXor: DATi #0x0
reset: FUNC
PARA *1
MOVp %1 &.s_resetf5ba0663
CALL ^trace %0 *2
POKE &doReset #TRUE
RETU
update: FUNC
PARA *1
$i: LOCi
$fx: LOCi
$fxRnd: LOCi
$fxBits: LOCi
$fxCount: LOCi
$stepRate: LOCi
$fxParams: LOCi
$stepBits: LOCi
$fxs: LOCA *8
$fxCountFloat: LOCf
MOVp %1 &.s_updatef5ba0664
CALL ^trace %0 *2
POKE &dirXor #0
PEEK %0 &params:SWITCHES_PARAM_INDEX
ANDi %0 %0 #SWITCHES_REVERSE_MASK
EQUi %0 #0 @.f0
POKE &dirXor #0xFFFF
.f0: PEEK $fxBits &params:OPERAND_1_HIGH_PARAM_INDEX
MOVi $fxCount #0
PEEK $fxParams &params:OPERATOR_1_PARAM_INDEX
LEQi $fxParams #0 @.f1
MOVi $i #0
GEQi #0 #8 @.f1
.l3: SHRi %0 #0x80 $i
ANDi %0 $fxBits %0
EQUi %0 #0 @.f4
SETL $fxs $fxCount $i
ADDi $fxCount $fxCount #1
.f4: FORi $i #8 @.l3
.f1: PEEK %1 &params:OPERAND_1_LOW_PARAM_INDEX
ADDi %1 %1 #1
CALL &seedRandom %0 *2
PEEK %0 &params:OPERATOR_2_PARAM_INDEX
SUBi $stepRate %0 #1
GEQi $stepRate #0 @.f5
POKE &clockMask #0x0
POKE &clockShift #0
POKE &fxQuantize #0
POKE &stepFXs:0 #-1
LEQi $fxCount #0 @.e7
POKE &stepFXs:0 $fxs:0
GOTO @.e7
.f5: ANDi %0 $stepRate #1
SHLi %0 %0 #16
IORi %0 #0xFFFF %0
POKE &clockMask %0
SHRi %0 $stepRate #1
IORi %0 #12 %0
POKE &clockShift %0
POKE &fxQuantize #0xFFF
NEQi $fxCount #0 @.f8
MOVi $i #0
GEQi #0 #STEP_COUNT @.e11
.l10: POKE &stepFXs $i #-1
FORi $i #STEP_COUNT @.l10
GOTO @.e11
.f8: PEEK %0 &params:OPERAND_2_HIGH_PARAM_INDEX
SHLi %0 %0 #8
PEEK %1 &params:OPERAND_2_LOW_PARAM_INDEX
IORi $stepBits %0 %1
iTOf $fxCountFloat $fxCount #1.0
SUBi $fxCount $fxCount #1
MOVi $fx #-1
MOVi $i #0
GEQi #0 #STEP_COUNT @.e12
.l13: CALL &randomFloat %0 *1
MULf %0 %0 $fxCountFloat
fTOi $fxRnd %0 #1.0
LEQi $fxRnd $fxCount @.f14
MOVi $fxRnd $fxCount
.f14: ANDi %0 $i #15
SHLi %0 $stepBits %0
ANDi %0 %0 #0x8000
EQUi %0 #0 @.f15
GEQi $fx #0 @.e17
GETL $fx $fxs $fxRnd
GOTO @.e17
.f15: MOVi $fx #-1
.e17: POKE &stepFXs $i $fx
FORi $i #STEP_COUNT @.l13
.e12: NOOP
.e11: NOOP
.e7: MOVi $i #0
GEQi #0 #STEP_COUNT @.e18
.l19: SWCH $fxParams *5 @.s20
.s20#0: MOVi $fx #1
GOTO @.e21
.s20#1: MOVi $fx #1
GOTO @.e21
.s20#2: MOVi $fx #2
GOTO @.e21
.s20#3: MOVi $fx #0
GOTO @.e21
.s20#4: CALL &randomFloat %0 *1
fTOi $fx %0 #2.9999
.s20: NOOP
.e21: POKE &stepFXParams $i $fx
FORi $i #STEP_COUNT @.l19
.e18: RETU
init: FUNC
PARA *1
$i: LOCi
$p: LOCp
$fxRate: LOCi
$s: LOCi
$t: LOCi
MOVp %1 &.s_initf5ba0665
CALL ^trace %0 *2
CALL &update %0 *1
MOVp $p &FX_PARAMS
MOVi $i #0
GEQi #0 #3 @.e0
.l1: SUBi $fxRate $i #1
ADDi %0 #1 $fxRate
SHLi %0 #4 %0
POKE $p #FX_PARAM_TAPE_STOP_RATE %0
SUBi %0 #1 $fxRate
POKE $p #FX_PARAM_TRANCE_GATE_RATE %0
! XORi <A> #0 #-1
SUBi %0 #2 $fxRate
SHLi %0 <A> %0
POKE $p #FX_PARAM_BIT_CRUSH_MASK %0
SUBi $s #10 $fxRate
POKE $p #FX_PARAM_SHIFT_10 $s
SHLi $t #3 $s
POKE $p #FX_PARAM_REPEAT_OFF_3 $t
XORi %0 $t #-1
POKE $p #FX_PARAM_REPEAT_MASK %0
SHLi $t #1 $s
POKE $p #FX_PARAM_1_LSHIFT_10 $t
SUBi %0 $t #1
POKE $p #FX_PARAM_MASK_10 %0
SUBi $s #9 $fxRate
POKE $p #FX_PARAM_SHIFT_9 $s
SHLi %0 #1 $s
POKE $p #FX_PARAM_1_LSHIFT_9 %0
ADDp $p $p #FX_PARAM_COUNT
FORi $i #3 @.l1
.e0: RETU
process: FUNC
PARA *1
$i: LOCi
$x: LOCi
$mask: LOCi
$stepBits: LOCi
$trig: LOCi
$step: LOCi
$globalClock: LOCi
$measure: LOCi
$twoBarClock: LOCi
$hostPos: LOCi
$inp: LOCA *2
$outp: LOCA *2
$samples: LOCA *4
$fxParams: LOCA *FX_PARAM_COUNT
$clock: LOCi
$fx: LOCi
$held: LOCi
$mix: LOCi
$pos: LOCi
$posInc: LOCi
.l0: PEEK %0 &doReset
EQUi %0 #FALSE @.f1
POKE &doReset #FALSE
MOVi $clock #0
MOVi $fx #-1
MOVi $held #0
MOVi $mix #0
MOVi $pos #0
MOVi $posInc #0
ADRL %0 $fxParams *0
COPY %0 &FX_PARAMS *FX_PARAM_COUNT
.f1: MOVi $trig #FALSE
PEEK %0 &params:SWITCHES_PARAM_INDEX
ANDi %0 %0 #SWITCHES_SYNC_MASK
EQUi %0 #0 @.f2
PEEK $hostPos &hostPosition
LSSi $hostPos #0 @.f2
PEEK $globalClock &clock
SHLi %0 $globalClock #16
! MULi <A> #HOST_POSITION_PPQ #2
SHRi %0 %0 #31
ADDi %1 $hostPos #HOST_POSITION_PPQ
MULi %0 <A> %0
ADDi %1 %1 %0
! MULi <A> #HOST_POSITION_PPQ #4
DIVi $measure %1 <A>
PEEK %1 &clock
PEEK %0 &dirXor
ANDi %2 $measure #1
XORi %1 %1 %0
SHLi %2 %2 #16
ADDi $twoBarClock %1 %2
ANDi %1 $clock #0x1FFFF
EQUi $twoBarClock %1 @.f2
MOVi $clock $twoBarClock
MOVi $trig #TRUE
.f2: PEEK %1 &fxQuantize
ANDi %1 $clock %1
NEQi %1 #0 @.f5
PEEK %1 &dirXor
XORi %1 $clock %1
PEEK %2 &clockMask
ANDi %1 %1 %2
PEEK %2 &clockShift
SHRi $step %1 %2
ANDi %1 $step #15
SHRi %1 #0x80 %1
POKE &displayLEDs:2 %1
ANDi %1 $step #15
SHRi %1 #0x8000 %1
POKE &displayLEDs:3 %1
PEEK $x &stepFXs $step
EQUi $x $fx @.f5
MOVi $fx $x
LSSi $fx #0 @.f7
MOVi $trig #TRUE
MOVi $held $fx
SHRi %1 #0x80 $fx
POKE &displayLEDs:0 %1
PEEK %1 &stepFXParams $step
MULi %1 %1 #FX_PARAM_COUNT
ADRL %2 $fxParams *0
ADDp %1 &FX_PARAMS %1
COPY %2 %1 *FX_PARAM_COUNT
GOTO @.e8
.f7: POKE &displayLEDs:0 #0
.e8: NOOP
.f5: MOVi %1 $clock
MOVi %2 #1
MOVp %3 &signal
CALL ^write %0 *4
MOVi %1 $clock
MOVi %2 #1
ADRL %3 $inp *0
CALL ^read %0 *4
SWCH $held *8 @.s9
.s9#REVERSE_FX: EQUi $trig #FALSE @.f11
MOVi $pos $clock
.f11: SUBi $pos $pos #1
MOVi %1 $pos
MOVi %2 #1
ADRL %3 $outp *0
CALL ^read %0 *4
GOTO @.e10
.s9#TAPE_STOP_FX: EQUi $trig #FALSE @.f12
SHLi $pos $clock #16
MOVi $posInc #0x10000
.f12: ANDi $x $pos #0xFFFF
SHRi %1 $pos #16
MOVi %2 #2
ADRL %3 $samples *0
CALL ^read %0 *4
SUBi %0 $samples:2 $samples:0
MULi %0 %0 $x
SHRi %0 %0 #16
ADDi $outp:0 $samples:0 %0
SUBi %0 $samples:3 $samples:1
MULi %0 %0 $x
SHRi %0 %0 #16
ADDi $outp:1 $samples:1 %0
ADDi $pos $pos $posInc
SUBi $posInc $posInc $fxParams:FX_PARAM_TAPE_STOP_RATE
GEQi $posInc #0 @.e10
MOVi $posInc #0
GOTO @.e10
.s9#HALF_SPEED_EFFECT: EQUi $trig #FALSE @.f14
SHLi $pos $clock #1
.f14: SHRi %1 $pos #1
MOVi %2 #1
ADRL %3 $outp *0
CALL ^read %0 *4
ADDi $pos $pos #1
GOTO @.e10
.s9#TRANCE_GATE_EFFECT: SHRi %0 $clock $fxParams:FX_PARAM_TRANCE_GATE_RATE
ANDi $x %0 #0x7FF
GEQi $x #0x280 @.f15
MOVi $x #0x1800
GOTO @.e16
.f15: GEQi $x #0x400 @.f17
SUBi %0 $x #0x280
SHLi %0 %0 #4
SUBi $x #0x1800 %0
GOTO @.e18
.f17: GEQi $x #0x7A0 @.f19
MOVi $x #0x0
GOTO @.e20
.f19: SUBi %0 $x #0x7A0
SHLi $x %0 #6
.e20: NOOP
.e18: NOOP
.e16: MULi %0 $inp:0 $x
SHRi $outp:0 %0 #12
MULi %0 $inp:1 $x
SHRi $outp:1 %0 #12
GOTO @.e10
.s9#BIT_CRUSH_EFFECT: ANDi %1 $clock $fxParams:FX_PARAM_BIT_CRUSH_MASK
MOVi %2 #1
ADRL %3 $outp *0
CALL ^read %0 *4
! XORi <A> #0x7F #-1
ANDi $outp:0 $outp:0 <A>
! XORi <A> #0x7F #-1
ANDi $outp:1 $outp:1 <A>
SHRi %0 $outp:0 #1
ADDi $outp:0 $outp:0 %0
SHRi %0 $outp:1 #1
ADDi $outp:1 $outp:1 %0
GOTO @.e10
.s9#REPEAT_EFFECT: ANDi $pos $clock $fxParams:FX_PARAM_REPEAT_MASK
MOVi %1 $pos
MOVi %2 #1
ADRL %3 $samples *0
CALL ^read %0 *4
ANDi %0 $clock $fxParams:FX_PARAM_REPEAT_OFF_3
NEQi %0 $fxParams:FX_PARAM_REPEAT_OFF_3 @.f21
ADDi $pos $pos $fxParams:FX_PARAM_REPEAT_OFF_3
GOTO @.e22
.f21: SUBi $pos $pos $fxParams:FX_PARAM_1_LSHIFT_10
.e22: ANDi %0 $clock $fxParams:FX_PARAM_MASK_10
MULi %0 %0 #2
SUBi $x %0 $fxParams:FX_PARAM_1_LSHIFT_10
GEQi $x #0 @.f23
MOVi $x #0
GOTO @.e24
.f23: LEQi $x $fxParams:FX_PARAM_MASK_10 @.f25
MOVi $x $fxParams:FX_PARAM_MASK_10
.f25: NOOP
.e24: MOVi %1 $pos
MOVi %2 #1
ADRL %3 $samples:2 *0
CALL ^read %0 *4
SUBi %0 $samples:2 $samples:0
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_10
ADDi $outp:0 $samples:0 %0
SUBi %0 $samples:3 $samples:1
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_10
ADDi $outp:1 $samples:1 %0
GOTO @.e10
.s9#STRETCH_EFFECT: EQUi $trig #FALSE @.f26
MOVi $pos $clock
.f26: MOVi %1 $pos
MOVi %2 #1
ADRL %3 $samples *0
CALL ^read %0 *4
SUBi %1 $pos $fxParams:FX_PARAM_1_LSHIFT_9
MOVi %2 #1
ADRL %3 $samples:2 *0
CALL ^read %0 *4
ANDi $x $clock $fxParams:FX_PARAM_MASK_10
SUBi %0 $samples:2 $samples:0
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_10
ADDi $outp:0 $samples:0 %0
SUBi %0 $samples:3 $samples:1
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_10
ADDi $outp:1 $samples:1 %0
ADDi $pos $pos #1
NEQi $x $fxParams:FX_PARAM_MASK_10 @.e10
SUBi $pos $pos $fxParams:FX_PARAM_1_LSHIFT_9
GOTO @.e10
.s9#PITCH_SHIFT_EFFECT: SUBi %0 $fxParams:FX_PARAM_1_LSHIFT_9 #1
ANDi $x $clock %0
SUBi %0 $fxParams:FX_PARAM_1_LSHIFT_9 #1
XORi %0 %0 #-1
ANDi %0 $clock %0
MULi %1 $x #2
ADDi $pos %0 %1
SUBi %1 $pos $fxParams:FX_PARAM_1_LSHIFT_9
MOVi %2 #1
ADRL %3 $samples *0
CALL ^read %0 *4
SUBi %1 $pos $fxParams:FX_PARAM_1_LSHIFT_10
MOVi %2 #1
ADRL %3 $samples:2 *0
CALL ^read %0 *4
SUBi %0 $samples:2 $samples:0
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_9
ADDi $outp:0 $samples:0 %0
SUBi %0 $samples:3 $samples:1
MULi %0 %0 $x
SHRi %0 %0 $fxParams:FX_PARAM_SHIFT_9
ADDi $outp:1 $samples:1 %0
.s9: NOOP
.e10: LSSi $fx #0 @.f28
ADDi $mix $mix #0x800
LEQi $mix #0x8000 @.e30
MOVi $mix #0x8000
GOTO @.e30
.f28: SUBi $mix $mix #0x100
GEQi $mix #0 @.f31
MOVi $mix #0
.f31: NOOP
.e30: SUBi %0 $outp:0 $inp:0
MULi %0 %0 $mix
SHRi %0 %0 #15
ADDi %0 $inp:0 %0
POKE &signal:0 %0
SUBi %0 $outp:1 $inp:1
MULi %0 %0 $mix
SHRi %0 %0 #15
ADDi %0 $inp:1 %0
POKE &signal:1 %0
CALL ^yield %0 *1
ADDi $clock $clock #1
GOTO @.l0
RETU
.s_stdREVf5ba065b: CNST *25
DATs std  REVERSE     STRETCH
DATi #0
.s_fastCRf5ba065c: CNST *50
DATs fast
DATi #32 #197 #32 #32
DATs CRUSH
DATi #32 #32 #32 #32 #197 #32 #32
DATs PITCH
DATi #32 #32 #32 #32 #195
DATs --- Enabled Effects
DATi #0
.s_slowCHf5ba065d: CNST *53
DATs slow
DATi #32 #197 #32 #32 #197 #32 #32
DATs CHOP
DATi #32 #32 #197 #32 #32 #197 #32 #32
DATs SLOW
DATi #32 #32 #32 #32 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #0
.s_rndAK4f5ba065e: CNST *54
DATs rnd
DATi #32 #32 #197 #32 #32 #197 #32 #32 #197 #32
DATs AK47
DATi #197 #32 #32 #197 #32 #32 #197 #32
DATs STOP
DATi #32 #209 #32 #32
DATs Random Order Seed
DATi #32 #32 #210 #0
.s_1616f5ba065f: CNST *6
DATs 16/16
DATi #0
.s_3216f5ba0660: CNST *6
DATs 32/16
DATi #0
.s_88f5ba0661: CNST *53
DATs 8/8
DATi #32 #32 #32 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #211 #0
.s_168Gatf5ba0662: CNST *54
DATs 16/8
DATi #32 #209 #32 #32
DATs Gates (prev step off = trigger new effect)
DATi #32 #32 #210 #0
.s_resetf5ba0663: CNST *6
DATs reset
DATi #0
.s_updatef5ba0664: CNST *7
DATs update
DATi #0
.s_initf5ba0665: CNST *5
DATs init
DATi #0
