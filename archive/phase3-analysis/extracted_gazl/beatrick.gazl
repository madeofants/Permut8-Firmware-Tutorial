PRAWN_FIRMWARE_PATCH_FORMAT: ! DEFi #2
FALSE: ! DEFi #0
TRUE: ! DEFi #1
panelTextRows: CNST *8
DATA &.s_MUTEste749a968 &.s_REPEATe749a969
DATA &.s_SKIPste749a96a &.s_HOLDste749a96b
DATA &.s_ACCENTe749a96c &.s_STUTTEe749a96d
DATA &.s_REVERSe749a96e &.s_TAPESTe749a96f
GLOB *1
clock: DATi #0
params: GLOB *PARAM_COUNT
displayLEDs: GLOB *4
CNST *1
clockFreqLimit: DATi #132300
signal: GLOB *2
CNST *1
! SHLi <A> #1 #OPERATOR_1_PARAM_INDEX
! SHLi <B> #1 #OPERAND_1_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_1_LOW_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERATOR_2_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_HIGH_PARAM_INDEX
! IORi <A> <A> <B>
! SHLi <B> #1 #OPERAND_2_LOW_PARAM_INDEX
! IORi <A> <A> <B>
updateMask: DATi <A>
NOP: ! DEFi #0
MUTE: ! DEFi #1
REPEAT: ! DEFi #2
SKIP: ! DEFi #3
HOLD: ! DEFi #4
ACCENT: ! DEFi #1
STUTTER: ! DEFi #2
REVERSE: ! DEFi #3
TAPE_STOP: ! DEFi #4
LOOKAHEAD: ! DEFi #0x80
GLOB *1
bottomOperator: DATi #0
steps: GLOB *16
gains: GLOB *16
holds: GLOB *16
sfxs: GLOB *16
GLOB *1
lastInStep: DATi #-1
GLOB *1
currentOutStep: DATi #0
GLOB *1
stopIndex: DATi #0
GLOB *1
stopRate: DATi #0
GLOB *1
currentGain: DATi #0
reset: FUNC
PARA *1
POKE &lastInStep #-1
POKE &currentGain #0x10000
RETU
update: FUNC
PARA *1
$topOperator: LOCi
$bottomOperator: LOCi
$topBits: LOCi
$bottomBits: LOCi
$i: LOCi
$j: LOCi
$g: LOCi
PEEK $topOperator &params:OPERATOR_1_PARAM_INDEX
PEEK $bottomOperator &params:OPERATOR_2_PARAM_INDEX
PEEK %0 &params:OPERAND_1_HIGH_PARAM_INDEX
SHLi %0 %0 #8
PEEK %1 &params:OPERAND_1_LOW_PARAM_INDEX
IORi $topBits %0 %1
PEEK %0 &params:OPERAND_2_HIGH_PARAM_INDEX
SHLi %0 %0 #8
PEEK %1 &params:OPERAND_2_LOW_PARAM_INDEX
IORi $bottomBits %0 %1
POKE &bottomOperator $bottomOperator
MOVi $i #0
GEQi #0 #16 @.e0
.l1: POKE &gains $i #0x10000
POKE &steps $i $i
POKE &holds $i #0
POKE &sfxs $i #0
FORi $i #16 @.l1
.e0: SWCH $topOperator *5 @.s2
.s2#MUTE: MOVi $i #0
GEQi #0 #16 @.e3
.l5: POKE &gains $i #0xFFFF
SHRi %0 #0x8000 $i
ANDi %0 $topBits %0
NEQi %0 #0 @.f6
POKE &gains $i #0
.f6: FORi $i #16 @.l5
GOTO @.e3
.s2#REPEAT: MOVi $j #0
MOVi $i #1
GEQi #1 #16 @.e7
.l8: SHRi %0 #0x8000 $i
ANDi %0 $topBits %0
EQUi %0 #0 @.f9
MOVi $j $i
.f9: FORi $i #16 @.l8
.e7: MOVi $i #0
GEQi #0 #16 @.e3
.l11: SHRi %0 #0x8000 $i
ANDi %0 $topBits %0
EQUi %0 #0 @.f12
MOVi $j $i
.f12: POKE &steps $i $j
FORi $i #16 @.l11
GOTO @.e3
.s2#SKIP: EQUi $topBits #0 @.e3
MOVi $i #0
MOVi $j #0
.l14: SHRi %0 #0x8000 $j
ANDi %0 $topBits %0
EQUi %0 #0 @.f15
POKE &steps $i $j
ADDi $i $i #1
.f15: ADDi %0 $j #1
ANDi $j %0 #15
LSSi $i #16 @.l14
GOTO @.e3
.s2#HOLD: MOVi $i #0
GEQi #0 #16 @.e16
.l17: SHRi %0 #0x8000 $i
ANDi %0 $topBits %0
POKE &holds $i %0
FORi $i #16 @.l17
.e16: NOOP
.s2: NOOP
.e3: PEEK %0 &bottomOperator
SWCH %0 *5 @.s18
.s18#ACCENT: MOVi $i #0
GEQi #0 #16 @.e19
.l21: PEEK $g &gains $i
SHRi %0 #0x8000 $i
ANDi %0 $bottomBits %0
NEQi %0 #0 @.f22
SHRi $g $g #1
GOTO @.e23
.f22: SHLi $g $g #1
.e23: POKE &gains $i $g
FORi $i #16 @.l21
GOTO @.e19
.s18#REVERSE: NOOP
.s18#STUTTER: NOOP
.s18#TAPE_STOP: MOVi $i #0
GEQi #0 #16 @.e24
.l25: SHRi %0 #0x8000 $i
ANDi %0 $bottomBits %0
POKE &sfxs $i %0
FORi $i #16 @.l25
.e24: NOOP
.s18: NOOP
.e19: RETU
process: FUNC
PARA *1
$localClock: LOCi
$inStep: LOCi
$outStep: LOCi
$i: LOCi
$gc: LOCi
$si: LOCi
$sr: LOCi
$f: LOCi
$gain: LOCi
$localSignal: LOCA *4
PEEK $localClock &clock
SHRi $inStep $localClock #12
SHRi %0 #0x80 $inStep
POKE &displayLEDs:2 %0
SHRi %0 #0x8000 $inStep
POKE &displayLEDs:3 %0
PEEK %0 &holds $inStep
NEQi %0 #0 @.f0
ADRL %0 $localSignal *0
COPY %0 &signal *2
MOVi %1 $localClock
MOVi %2 #1
ADRL %3 $localSignal *0
CALL ^write %0 *4
.f0: PEEK %0 &lastInStep
EQUi %0 $inStep @.f1
PEEK %0 &steps $inStep
POKE &currentOutStep %0
.f1: PEEK $outStep &currentOutStep
SHRi %0 #0x80 $outStep
POKE &displayLEDs:0 %0
SHRi %0 #0x8000 $outStep
POKE &displayLEDs:1 %0
SHLi $i $outStep #12
PEEK %0 &sfxs $inStep
NEQi %0 #0 @.f2
ANDi %1 $localClock #0xFFF
IORi %1 $i %1
MOVi %2 #1
ADRL %3 $localSignal *0
CALL ^read %0 *4
GOTO @.e3
.f2: PEEK %0 &bottomOperator
SWCH %0 *5 @.s4
.s4#REVERSE: ANDi %1 $localClock #0xFFF
XORi %1 %1 #0xFFFFFFFFF
ADDi %1 $i %1
MOVi %2 #1
ADRL %3 $localSignal *0
CALL ^read %0 *4
GOTO @.e5
.s4#STUTTER: ANDi %1 $localClock #0x3FF
IORi %1 $i %1
MOVi %2 #1
ADRL %3 $localSignal *0
CALL ^read %0 *4
GOTO @.e5
.s4#TAPE_STOP: MOVi $si #0x0
MOVi $sr #0x10000
PEEK %0 &lastInStep
NEQi %0 $inStep @.f6
PEEK $si &stopIndex
PEEK $sr &stopRate
.f6: SHRi %1 $si #16
IORi %1 $i %1
MOVi %2 #2
ADRL %3 $localSignal *0
CALL ^read %0 *4
ANDi $f $si #0xFFFF
SUBi %0 $localSignal:2 $localSignal:0
MULi %0 %0 $f
SHRi %0 %0 #16
ADDi $localSignal:0 $localSignal:0 %0
SUBi %0 $localSignal:3 $localSignal:1
MULi %0 %0 $f
SHRi %0 %0 #16
ADDi $localSignal:1 $localSignal:1 %0
ADDi %0 $si $sr
POKE &stopIndex %0
SUBi %0 $sr #0x10
POKE &stopRate %0
.s4: NOOP
.e5: NOOP
.e3: MOVi $gc #0x10000
ADDi %0 $localClock #LOOKAHEAD
ANDi %0 %0 #0xFFFF
SHRi %0 %0 #12
PEEK $gain &gains %0
EQUi $gain #0x10000 @.f7
PEEK $gc &currentGain
MULi %0 $localSignal:0 $gc
SHRi $localSignal:0 %0 #16
MULi %0 $localSignal:1 $gc
SHRi $localSignal:1 %0 #16
SUBi %0 $gain $gc
SHRi %0 %0 #5
ADDi $gc $gc %0
.f7: POKE &lastInStep $inStep
POKE &currentGain $gc
ADRL %0 $localSignal *0
COPY &signal %0 *2
RETU
.s_MUTEste749a968: CNST *24
DATs MUTE steps that are off
DATi #0
.s_REPEATe749a969: CNST *36
DATs REPEAT steps that are on before off
DATi #0
.s_SKIPste749a96a: CNST *24
DATs SKIP steps that are off
DATi #0
.s_HOLDste749a96b: CNST *53
DATs HOLD steps that are on, turn on WRITE PROT when done
DATi #0
.s_ACCENTe749a96c: CNST *14
DATs ACCENT effect
DATi #0
.s_STUTTEe749a96d: CNST *15
DATs STUTTER effect
DATi #0
.s_REVERSe749a96e: CNST *15
DATs REVERSE effect
DATi #0
.s_TAPESTe749a96f: CNST *17
DATs TAPE STOP effect
DATi #0
