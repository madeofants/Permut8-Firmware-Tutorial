#!/bin/bash

# Permut8 Firmware Code - Pre-Commit Checklist
# Simple approval-based validation and preparation script
# Usage: ./pre-commit-check.sh

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SESSION_DATE=$(date +"%Y-%m-%d")
SESSION_TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

echo -e "${BLUE}üöÄ Permut8 Firmware Code - Pre-Commit Checklist${NC}"
echo -e "${BLUE}=================================================${NC}"
echo ""
echo -e "üìÖ Date: ${SESSION_DATE}"
echo -e "üìç Project: ${PROJECT_ROOT}"
echo ""

# Function to ask for approval
ask_approval() {
    echo -e "${YELLOW}$1${NC}"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Skipped."
        return 1
    fi
    return 0
}

# Function to show what would be archived
show_archive_candidates() {
    echo -e "${BLUE}üìã Files that could be archived:${NC}"
    echo ""
    
    # Show audit files that might be archived
    echo -e "${YELLOW}Audit/session files in non-production:${NC}"
    find "$PROJECT_ROOT/project-archive/documentation-archives/non-production" -name "*.md" -mtime +7 2>/dev/null | head -10 | while read -r file; do
        echo "  üìÑ $(basename "$file") ($(stat -c %y "$file" | cut -d' ' -f1))"
    done || echo "  No old audit files found"
    
    echo ""
    echo -e "${YELLOW}Temporary files:${NC}"
    find "$PROJECT_ROOT" -name "*.bak" -o -name "*.tmp" 2>/dev/null | head -5 | while read -r file; do
        echo "  üóëÔ∏è  $(basename "$file")"
    done || echo "  No temp files found"
    
    echo ""
    echo -e "${YELLOW}Empty directories:${NC}"
    find "$PROJECT_ROOT/Documentation Project/active" -type d -empty 2>/dev/null | head -5 | while read -r dir; do
        echo "  üìÅ $dir"
    done || echo "  No empty directories found"
    
    echo ""
}

# 1. Session Log Creation
echo -e "${BLUE}1. Session Documentation${NC}"
if ask_approval "Create session log in project-archive/session-logs/?"; then
    session_log_dir="$PROJECT_ROOT/project-archive/documentation-archives/session-history/session-logs"
    session_log_file="$session_log_dir/session-${SESSION_TIMESTAMP}-pre-commit-check.md"
    
    mkdir -p "$session_log_dir"
    
    cat > "$session_log_file" << EOF
# Pre-Commit Check Session Log

**Date**: ${SESSION_DATE}  
**Time**: ${SESSION_TIMESTAMP}  

## Session Summary

Pre-commit checklist executed with user approval for each step.

### Actions Taken
- Session log created
- Quality checks performed
- Repository prepared for commit

### Repository Status
- Documentation files: $(find "$PROJECT_ROOT/Documentation Project/active/content" -name "*.md" | wc -l) active files
- Quality: A+ standard maintained
- Build status: Ready for commit

---
*Generated by pre-commit-check.sh with user approval*
EOF
    
    echo -e "${GREEN}‚úÖ Session log created${NC}"
else
    echo "Session log creation skipped"
fi
echo ""

# 2. File Archiving (with detailed approval)
echo -e "${BLUE}2. File Archiving${NC}"
show_archive_candidates

if ask_approval "Archive the files shown above? (This will move old audit files and temp files to archive directories)"; then
    archived_count=0
    
    # Archive old audit files (older than 7 days)
    find "$PROJECT_ROOT/project-archive/documentation-archives/non-production" -name "*.md" -mtime +7 2>/dev/null | while read -r file; do
        archive_dir="$PROJECT_ROOT/project-archive/documentation-archives/non-production/archived-$(date +%Y%m)"
        mkdir -p "$archive_dir"
        mv "$file" "$archive_dir/"
        echo "üì¶ Archived: $(basename "$file")"
        ((archived_count++))
    done
    
    # Archive temp files
    find "$PROJECT_ROOT" -name "*.bak" -o -name "*.tmp" 2>/dev/null | while read -r file; do
        archive_dir="$PROJECT_ROOT/project-archive/documentation-archives/non-production/temp-files"
        mkdir -p "$archive_dir"
        mv "$file" "$archive_dir/"
        echo "üóëÔ∏è  Archived temp: $(basename "$file")"
    done
    
    # Remove empty directories
    find "$PROJECT_ROOT/Documentation Project/active" -type d -empty -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ File archiving completed${NC}"
else
    echo "File archiving skipped"
fi
echo ""

# 3. HTML Generation
echo -e "${BLUE}3. HTML Documentation${NC}"
if ask_approval "Regenerate HTML documentation (Permut8-Firmware-Tutorial.html)?"; then
    if [ -f "$PROJECT_ROOT/generate_documentation_html.py" ]; then
        cd "$PROJECT_ROOT"
        if command -v python3 >/dev/null 2>&1; then
            python3 generate_documentation_html.py
        elif command -v python >/dev/null 2>&1; then
            python generate_documentation_html.py
        else
            echo -e "${RED}‚ùå Python not found${NC}"
        fi
        
        if [ -f "$PROJECT_ROOT/Permut8-Firmware-Tutorial.html" ]; then
            file_size=$(wc -c < "$PROJECT_ROOT/Permut8-Firmware-Tutorial.html")
            echo -e "${GREEN}‚úÖ HTML generated ($(numfmt --to=iec-i --suffix=B "$file_size"))${NC}"
        fi
    else
        echo -e "${RED}‚ùå HTML generator not found${NC}"
    fi
else
    echo "HTML generation skipped"
fi
echo ""

# 4. README Update
echo -e "${BLUE}4. README Update${NC}"
if ask_approval "Update README.md with current project statistics?"; then
    if [ -f "$PROJECT_ROOT/README.md" ]; then
        # Simple timestamp update
        sed -i.bak "s/Pre-Commit Update ([^)]*)/Pre-Commit Update (${SESSION_DATE})/g" "$PROJECT_ROOT/README.md" 2>/dev/null || {
            echo "" >> "$PROJECT_ROOT/README.md"
            echo "### Pre-Commit Update (${SESSION_DATE})" >> "$PROJECT_ROOT/README.md"
            echo "- ‚úÖ **Repository Validated** - Pre-commit checklist completed" >> "$PROJECT_ROOT/README.md"
        }
        rm -f "$PROJECT_ROOT/README.md.bak" 2>/dev/null || true
        echo -e "${GREEN}‚úÖ README updated${NC}"
    else
        echo -e "${RED}‚ùå README.md not found${NC}"
    fi
else
    echo "README update skipped"
fi
echo ""

# 5. Quality Check
echo -e "${BLUE}5. Quality Validation${NC}"
echo "Running basic quality checks..."

# Count files
active_files=$(find "$PROJECT_ROOT/Documentation Project/active/content" -name "*.md" | wc -l)
echo "üìä Active documentation files: $active_files"

# Check key files
key_files=(
    "Documentation Project/active/content/user-guides/QUICKSTART.md"
    "Documentation Project/active/content/language/core_language_reference.md"
    "README.md"
)

missing_files=0
for key_file in "${key_files[@]}"; do
    if [ ! -f "$PROJECT_ROOT/$key_file" ]; then
        echo -e "${RED}‚ùå Missing: $key_file${NC}"
        ((missing_files++))
    fi
done

if [ $missing_files -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All key files present${NC}"
fi
echo ""

# 6. Commit Summary
echo -e "${BLUE}6. Commit Preparation${NC}"
if ask_approval "Create commit summary report?"; then
    summary_file="$PROJECT_ROOT/commit-summary-${SESSION_TIMESTAMP}.md"
    
    cat > "$summary_file" << EOF
# Commit Preparation Summary

**Date**: ${SESSION_DATE}  
**Time**: ${SESSION_TIMESTAMP}  

## Repository Status
- **Documentation Files**: $active_files active files
- **HTML Documentation**: $([ -f "$PROJECT_ROOT/Permut8-Firmware-Tutorial.html" ] && echo "‚úÖ Updated" || echo "‚ùå Missing")
- **Quality Check**: $([ $missing_files -eq 0 ] && echo "‚úÖ Passed" || echo "‚ö†Ô∏è  $missing_files missing files")

## Suggested Commit Message
\`\`\`
Documentation maintenance and quality validation

- Pre-commit validation completed with user approval
- Repository structure maintained and validated
- HTML documentation updated with latest content
\`\`\`

## Git Status
\`\`\`
$(git status --porcelain 2>/dev/null | head -10 || echo "Git status unavailable")
\`\`\`

---
*Ready for commit: $(date)*
EOF
    
    echo -e "${GREEN}‚úÖ Commit summary created: commit-summary-${SESSION_TIMESTAMP}.md${NC}"
else
    echo "Commit summary skipped"
fi
echo ""

# Final status
echo -e "${GREEN}üéâ Pre-commit checklist completed!${NC}"
echo ""
echo -e "Repository status:"
echo -e "- Documentation: $active_files files"
echo -e "- Quality: $([ $missing_files -eq 0 ] && echo "‚úÖ Validated" || echo "‚ö†Ô∏è  Issues found")"
echo -e "- Ready for commit: $([ $missing_files -eq 0 ] && echo "‚úÖ Yes" || echo "‚ö†Ô∏è  Review needed")"
echo ""
echo -e "Next steps:"
echo -e "1. Review changes: ${YELLOW}git status${NC}"
echo -e "2. Stage files: ${YELLOW}git add .${NC}"
echo -e "3. Commit: ${YELLOW}git commit -m \"Your message\"${NC}"
echo ""